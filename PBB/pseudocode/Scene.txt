-- Encapsulates what the user is currently seeing on the screen. 
-- A scene can be the actual game itself, or one of the menu screens. 

class Scene
private
    -- the name of scene as specified by the scene's id attribute in the XML file
    string name := NULL

    -- contains each control present within the scene.
    new List<Control> controls
public

    -- Initialises a new instance of Scene with the specified name. 
    -- Exceptions:
    -- ArgumentNullException: name is null
    -- ArgumentException: name evaluates to String::Empty.
    constructor Scene(string name)
        if(id = NULL)
            throw new ArgumentNullException("id")
        else if(id = String::Empty)
            throw ArgumentException("id")
        end if
        self->name := name
    end constructor

    -- Passes the arguments received via the SceneManager to the scenes child controls.
    function BroadcastArguments(string navigationArgs)

        for(i := 0 to controls->Count - 1)
            controls[0]->ReceiveSceneArgs(navigationArgs)
        end for
        
    end function

    -- Forwards the state of the keyboard and mouse on to the currently selected control. 
    -- keyboardState must not be null, mouseState may be.
    -- Exceptions:
    -- ArgumentNullException: keyboardState is NULL
    function Update(Keys keyboardState, Mouse moueState)
        
        if(keyboardState = NULL)
            throw ArgumentNullException("keyboardState")
        end if

        for(int i := 0 to controls->Count - 1)
            if(controls[i] is type SelectableControl)
                if(controls[i]->IsSelected)
                    controls[i]->Update(keyboardState, mouseState)
                end if
            end if
        end for

    end function

    -- Instructs each child control to draw itself to the backbuffer.
    function Render()

        for(i := 0 to controls->Count - 1)
            controls[i]->Render()
        end for

    end function
end class