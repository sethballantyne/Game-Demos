-- Encapsulates what the user is currently seeing on the screen. 
-- A scene can be the actual game itself, or one of the menu screens. 

class Scene
private
    -- the scene's name as specified by the scene's id attribute in the XML file
    string name := NULL

    -- contains each control present within the scene.
    new List<Control> controls

    -- true if this is the first scene the user see's when the application starts.
    bool initialScene := false
public

    -- Initialises a new instance of Scene with the specified name. 
    -- Exceptions:
    -- System::ArgumentNullException: name is null
    -- System::ArgumentException: name evaluates to String::Empty.
    constructor Scene(string name)
        if(id = NULL)
            throw new ArgumentNullException("id")
        else if(id = String::Empty)
            throw ArgumentException("id")
        end if
        self->name := name
    end constructor

    -- System::ArgumentNullException: name is NULL
    -- System::ArgumentException: name evaluates to String::Empty.
    constructor Scene(string name, bool initialScene)
        try
            Scene(name)
        catch
            throw
        end try

        this->initialScene := initialScene
    end constructor

    -- Passes the arguments received via the SceneManager to the scenes child controls.
    function BroadcastArguments(object[] navigationArgs)

        for(i := 0 to controls->Count - 1)
            controls[0]->ReceiveSceneArgs(navigationArgs)
        end for
        
    end function

    -- Forwards the state of the keyboard and mouse on to the currently selected control. 
    -- keyboardState must not be null, mouseState may be.
    -- Exceptions:
    -- ArgumentNullException: keyboardState is NULL
    function Update(Keys keyboardState, Mouse mouseState)
        
        if(keyboardState = NULL)
            throw ArgumentNullException("keyboardState")
        end if

        try
            for(int i := 0 to controls->Count - 1)
                if(controls[i] is type SelectableControl)
                    if(controls[i]->IsSelected)
                        controls[i]->Update(keyboardState, mouseState)
                    end if
                end if
            end for
        catch
            throw
        end try

    end function

    -- Instructs each child control to draw itself to the backbuffer.
    -- System::ArgumentNullException: a control is attempting to render a null string.
    -- DirectDrawGenericException: a non-specific DirectDraw error has occured.
    -- DirectDrawInvalidClipListException: DirectDraw does not support the provided clip list.
    -- DirectDrawInvalidObjectException: DirectDraw received a pointer that was an invalid DirectDraw object.
    -- DirectDrawInvalidParametersException: one or more of the parameters passed to the method are incorrect.
    -- DirectDrawInvalidRectException: the provided rectangle was invalid.
    -- DirectDrawNoAlphaHardwareException: no alpha acceleration hardware is present or available, 
    --                                     causing the failure of the requested operation.
    -- DirectDrawNoBlitHardwareException: no blitter hardware is present.
    -- DirectDrawNoClipListException: no clip list is available.
    -- DirectDrawNoDDRaserOperationHardwareException: no DirectDraw raster operation (ROP) hardware is available.
    -- DirectDrawNoMirrorHardwareException: the operation cannot be carried out because no mirroring hardware is present or available.
    -- DirectDrawNoRasterOperationHardwareException: the operation cannot be carried out because no appropriate raster operation hardware is present or available.
    -- DirectDrawNoRotationHardwareException: the operation cannot be carried out because no rotation hardware is present or available.
    -- DirectDrawNoStretchHardwareException: the operation cannot be carried out because there is no hardware support for stretching.
    -- DirectDrawNoZBUfferHardwareException: the hardware doesn't have Z buffer support.
    -- DirectDrawSurfaceBusyException: the specified surface locked by another thread and access has been refused.
    -- DirectDrawSurfaceLostException: access to the surface is refused because the surface memory is gone.
    -- DirectDrawUnsupportedException: the operation isn't supported.
    -- DirectDrawWasStillDrawingException: the previous blit operation that is transferring information to or from this surface is incomplete.
    -- System::Runtime::InteropServices::COMException: An unspecified COM+ error occured.
    function Render()
        try
            for(i := 0 to controls->Count - 1)
                controls[i]->Render()
            end for
        catch
            throw
        end try
    end function
end class