class Video
Private
    LPDIRECTDRAW7 lpDD := NULL;
    LPDIRECTDRAWSURFACE7 lpDDSPrimarySurface := NULL;
    LPDIRECTDRAWSURFACE7 lpDDSSecondarySurface := NULL;
    
    function void AttachDirectDrawClipper(array System::Drawing::Rectangle)
        result := lpDD->CreateClipper()
        if (result != DD_OK)
            switch(result)
                
            end switch
        end if
    end function

    function void CreateFullscreenWindow(HWND hWnd, uint width, uint height, uint bitsPerPixel)

        result := lpDD->SetCooperativeLevel(hWnd, DDSCL_FULLSCREEN | DDSCL_EXCLUSIVE | DDSCL_ALLOWREBOOT)
        if(result != DD_OK)
            switch(result)    
                DDERR_EXCLUSIVEMODEALREADYSET:
                    throw DirectDrawExclusiveModeAlreadySetException("SetCooperativeLevel: an attempt was made to set the cooperative level when it was already set to exclusive.")
                DDERR_HWNDALREADYSET:
                    throw DirectDrawHWNDAlreadySetException("SetCooperativeLevel: the window handle has already been set. It cannot be reset while the process has surfaces or palettes created.")
                DDERR_HWNDSUBCLASSED:
                    throw DirectDrawHWNDSubclassedException("SetCooperativeLevel: the window handle has been subclassed.")
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("SetCooperativelevel: DirectDraw received a pointer that was an invalid DirectDraw object. ")
                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("SetCooperativeLevel: one or more of the parameters passed to the method are incorrect.")
                DDERR_OUTOFMEMORY:
                    throw new System::OutOfMemoryException("SetCooperativeLevel: Not enough memory available to complete the operation.")
                default:
                    break
            end switch
        end if

        result := lpDD->SetDisplayMode(width, height, bitsPerPixel, 0, 0);
        if(result != DD_OK)
            switch(result)
                DDERR_GENERIC:
                    throw DirectDrawGenericException("SetDisplayMode: undefined error condition, so that's cool.")

                DDERR_INVALIDMODE:
                    throw DirectDrawInvalidModeException("SetDisplayMode: the requested mode is unsupported.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("SetDisplayMode: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("SetDisplayMode: one or more of the parameters passed to the method are incorrect.")

                DDERR_LOCKEDSURFACES:
                    throw DirectDrawLockedSurfaceException("SetDisplayMode: one or more surfaces are locked, causing the failure of the requested operation.")

                DDERR_NOEXCLUSIVEMODE:
                    throw DirectDrawNoExclusiveModeException("SetDisplayMode: exclusive mode required to complete the operation.")

                DDERR_SURFACEBUSY:
                    throw DirectDrawSurfaceBusyException("SetDisplayMode: access to the surface is refused because the surface is locked by another thread.")

                DDERR_UNSUPPORTED:
                    throw DirectDrawUnsupportedException("SetDisplayMode: the operation is not supported.")

                DDERR_UNSUPPORTEDMODE:
                    throw DirectDrawUnsupportedModeException("SetDisplayMode: the display is currently in an unsupported mode.")

                DDERR_WASSTILLDRAWING:
                    throw DirectDrawWasStillDrawingException("SetDisplayMode: the previous blit operation that is transferring information to or from this surface is incomplete.")

                default:
                    break
            end switch
        end if

        DDSURFACEDESC2 ddSD
        SecureZeroMemory(ddSD, sizeof(ddSD))

        ddSD.dwFlags := DDSD_CAPS | DDSD_BACKBUFFERCOUNT
        ddSD.ddsCaps.dwCaps := DDSDCAPS_PRIMARYSURFACE | DDSCAPS_COMPLEX | DDSCAPS_FLIP
        ddSD.dwBackBufferCount := 1

        result := lpDD->CreateSurface()
        if (result != DD_OK)
            switch(result)
                DDERR_INCOMPATIBLEPRIMARY:
                    throw DirectDrawIncompatiblePrimarySurfaceException("CreateSurface: the primary surface creation request does not match the existing primary surface. ")

                DDERR_INVALIDCAPS:
                    throw DirectDrawInvalidCapsException("CreateSurface: one or more of the capability bits is incorrect.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectExeption("CreateSurface: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("CreateSurface: one or more of the parameters passed to the method are incorrect.")

                DDERR_INVALIDPIXELFORMAT:
                    throw DirectDrawInvalidPixelFormatException("CreateSurface: an invalid pixel format was specified.")

                DDERR_NOALPHAHW:
                    throw DirectDrawNoAlphaHardwareException("CreateSurface: the video device doesn't support alpha hardware acceleration or it's unavailable.")

                DDERR_NOCOOPERATIVELEVELSET:
                    throw DirectDrawNoCooperativeLevelSetException("CreateSurface: attempting to create a surface without first setting the cooperative level.")

                DDERR_NODIRECTDRAWHW:
                    throw DirectDrawNoDirectDrawHardwareException("CreateSurface: the current device doesn't support hardware-only DirectDraw acceleration.")

                DDERR_NOEMULATION:
                    throw DirectDrawNoEmulationException("CreateSurface: software emulation isn't available.")

                DDERR_NOEXCLUSIVEMODE:
                    throw DirectDrawNoExclusiveModeException("CreateSurface: exclusive mode required to complete the operation.")

                DDERR_NOFLIPHW:
                    throw DirectDrawNoFlipHardwareException("CreateSurface: flipping visible surfaces is not supported by the video hardware.")

                DDERR_NOMIPMAPHW:
                    throw DirectDrawNoMipMapHardwareException("CreateSurface: unable to complete the operation because mipmapping isn't supported by the hardware or is not available.")

                DDERR_NOOVERLAYHW:
                    throw DirectDrawNoOverlayHardwareException("CreateSurface: unable to complete the operation because no hardware support for overlay is available.")

                DDERR_NOZBUFFERHW:
                    throw DirectDrawNoZBufferHardwareException("CreateSurface: unable to complete the operation because no hardware support for Z-ordering overlays is available")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("CreateSurface: DirectDraw does not have enough memory to perform the operation.")

                DDERR_OUTOFVIDEOMEMORY:
                    throw DirectDrawOutOfVideoMemoryException("CreateSurface: DirectDraw does not have enough display memory to perform the operation.")

                DDERR_PRIMARYSURFACEALREADYEXISTS:
                    throw DirectDrawPrimarySurfaceAlreadyExistsException("CreateSurface: a primary surface already exists.")

                DDERR_UNSUPPORTEDMODE:
                    throw DirectDrawUnsupportedModeException("CreateSurface: unable to create a surface for the current display mode, it's unsupported.")

                default:
                    break
            end switch
        end if

        ddSD.ddSDCaps.dwCaps := DDSCAPS_BACKBUFFER

        result := lpDDSPrimarySurface->GetAttachedSurface(&ddSD.ddSCaps, &lpDDSBack)
        if(result != DD_OK)
            switch(result)
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("GetAttachedSurface: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("GetAttachedSurface: one or more of the parameters passed to the method are incorrect.")

                DDERR_NOTFOUND:
                    throw DirectDrawNotFoundException("GetAttachedSurface: the requested item was not found.")

                DDERR_SURFACELOST:
                    throw DirectDrawSurfaceLostExeption("GetAttachedSurface: access to the surface is refused because the surface memory is gone. Call IDirectDrawSurfacce7::Restore() on this surface to restore the memory associated with it.")

                default:
                    break
            end switch
        end if

        System::Rectangle screenRect := ( x => 0,  y => 0, Width => width - 1, Height => height - 1)

        try
            AttachClipper(screenRect)
        catch
            throw
        end try-catch
    end function

Public
    function void Initialise() : static
        result := DirectDrawCreateEx()
        if(result != DD_OK) 
            switch(result)
                DDER_INVALIDDIRECTDRAWGUID:
                    throw DirectDrawInvalidGUIDException("Invalid GUID passed to DirectDrawCreateEx")

                DDER_DIRECTDRAWALREADYCREATED:
                    throw DirectDrawAlreadyCreatedException("Direct Draw has already been initialised.")

                DDER_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("Invalid parameters passed to DirectDrawCreateEx")

                DDER_GENERIC:
                    throw DirectDrawGenericException("Undefined error condition returned by DirectDrawCreateEx. Consult your local psychic.")
            
                DDERR_NODIRECTDRAWHW:
                    throw DirectDrawNoHardwareException("The specified driver doesn't support DirectDraw hardware acceleration.")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("Not enough memory available to initialise DirectDraw.")
            
                default:
                    break
            end switch
        end if
    end function

    function void SetDisplayMode(HWND hWnd, uint width, uint height, uchar bitsPerPixel, bool fullscreen) : static
        try
            if fullscreen = true
                CreateFullscreenWindow(hWnd, width, height, bitsPerPixel)
            else
                CreateDesktopWindow(hWnd, width, height, bitsPerPixel)
            end if
        catch
            throw;
        end try-catch
    end function

    function void Shutdown() : static
        if(lpDDSPrimarySurface != NULL)
            lpDDSPrimarySurface->Release();
            lpDDSPrimarySurface := NULL;
        end if

        if(lpDDSSecondarySurface != NULL)
            lpDDSSecondarySurface->Release();
            lpDDSSecondarySurface := NULL;

        if(lpDD != NULL)
            lpDD->Release();
            lpDD := NULL;
        end if
    end function

end class