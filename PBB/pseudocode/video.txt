class Video
Private
    LPDIRECTDRAW7 lpDD := NULL
    LPDIRECTDRAWSURFACE7 lpDDSPrimarySurface := NULL
    LPDIRECTDRAWSURFACE7 lpDDSSecondarySurface := NULL
    LPDIRECTDRAWCLIPPER lpDDClipper := NULL

    function uint RGBTo32Bit(uint a, uint r, uint g, uint b) : inline, static
            return ((b) + ((g) << 8) + ((r) << 16) + ((a) << 24))
    end function

    function void AttachClipper(HWND hWnd) : static
        
        result := lpDD->CreateClipper()
        if (result != DD_OK)
            switch(result)
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("CreateClipper: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("CreateClipper: one or more of the parameters passed to the method are incorrect.")

                DDERR_NOCOOPERATIVELEVELSET:
                    throw DirectDrawNoCooperativeLevelSetException("CreateClipper: attempting to attach a clipper without first setting the cooperative level.")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("CreateClipper: not enough memory available to complete the operation.")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDraw7::CreateClipper failed.", result)
            end switch
        end if

        result := lpDDClipper->SetHWnd(0, hWnd)
        if(result != DD_OK)
            switch(result)
                DDERR_INVALIDCLIPLIST:
                    throw DirectDrawInvalidClipListException("SetHWnd: DirectDraw doesn't support the provided clip list.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("SetHWnd: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("SetHWnd: One or more of the parameters passed to the method are incorrect.")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemory("SetHWnd: not enough memory to complete the operation.")
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDrawClipper::SetHWnd failed.", result)
            end switch
                
        end if

        result := lpDDSSecondarySurface->SetClipper(lpDDClipper)
        if(result != DD_OK)
            switch(result)
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("SetClipper: DirectDraw doesn't support the provided clip list.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("SetClipper: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDSURFACETYPE:
                    throw DirectDrawInvalidSurfaceTypeException("SetClipper: the requested operation could not be performed because the surface was of the wrong type.")

                DDERR_NOCLIPPERATTACHED
                    throw DirectDrawNoClipperAttachedException("SetClipper: No DirectDrawClipper object is attached to the surface object.")
                
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDrawSurface7::SetClipper failed.", result)
            end switch
        end if
    end function

    function void CreateFullscreenWindow(HWND hWnd, uint width, uint height, uint bitsPerPixel) : static 

        VerifyNotNull(lpDD)
        result := lpDD->SetCooperativeLevel(hWnd, DDSCL_FULLSCREEN | DDSCL_EXCLUSIVE | DDSCL_ALLOWREBOOT)
        if(result != DD_OK)
            switch(result)    
                DDERR_EXCLUSIVEMODEALREADYSET:
                    throw DirectDrawExclusiveModeAlreadySetException("SetCooperativeLevel: an attempt was made to set the cooperative level when it was already set to exclusive.")
                DDERR_HWNDALREADYSET:
                    throw DirectDrawHWNDAlreadySetException("SetCooperativeLevel: the window handle has already been set. It cannot be reset while the process has surfaces or palettes created.")
                DDERR_HWNDSUBCLASSED:
                    throw DirectDrawHWNDSubclassedException("SetCooperativeLevel: the window handle has been subclassed.")
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("SetCooperativelevel: DirectDraw received a pointer that was an invalid DirectDraw object.")
                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("SetCooperativeLevel: one or more of the parameters passed to the method are incorrect.")
                DDERR_OUTOFMEMORY:
                    throw new System::OutOfMemoryException("SetCooperativeLevel: Not enough memory available to complete the operation.")
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDraw7::SetCooperativeLevel failed.", result)
            end switch
        end if

        result := lpDD->SetDisplayMode(width, height, bitsPerPixel, 0, 0);
        if(result != DD_OK)
            switch(result)
                DDERR_GENERIC:
                    throw DirectDrawGenericException("SetDisplayMode: undefined error condition, so that's cool.")

                DDERR_INVALIDMODE:
                    throw DirectDrawInvalidModeException("SetDisplayMode: the requested mode is unsupported.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("SetDisplayMode: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("SetDisplayMode: one or more of the parameters passed to the method are incorrect.")

                DDERR_LOCKEDSURFACES:
                    throw DirectDrawLockedSurfaceException("SetDisplayMode: one or more surfaces are locked, causing the failure of the requested operation.")

                DDERR_NOEXCLUSIVEMODE:
                    throw DirectDrawNoExclusiveModeException("SetDisplayMode: exclusive mode required to complete the operation.")

                DDERR_SURFACEBUSY:
                    throw DirectDrawSurfaceBusyException("SetDisplayMode: access to the surface is refused because the surface is locked by another thread.")

                DDERR_UNSUPPORTED:
                    throw DirectDrawUnsupportedException("SetDisplayMode: the operation is not supported.")

                DDERR_UNSUPPORTEDMODE:
                    throw DirectDrawUnsupportedModeException("SetDisplayMode: the display is currently in an unsupported mode.")

                DDERR_WASSTILLDRAWING:
                    throw DirectDrawWasStillDrawingException("SetDisplayMode: the previous blit operation that is transferring information to or from this surface is incomplete.")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDraw7::SetDisplayMode failed.\n", result)
            end switch
        end if

        DDSURFACEDESC2 ddSD
        SecureZeroMemory(ddSD, sizeof(ddSD))

        ddSD.dwFlags := DDSD_CAPS | DDSD_BACKBUFFERCOUNT
        ddSD.ddsCaps.dwCaps := DDSDCAPS_PRIMARYSURFACE | DDSCAPS_COMPLEX | DDSCAPS_FLIP
        ddSD.dwBackBufferCount := 1

        result := lpDD->CreateSurface()
        if (result != DD_OK)
            switch(result)
                DDERR_INCOMPATIBLEPRIMARY:
                    throw DirectDrawIncompatiblePrimarySurfaceException("CreateSurface: the primary surface creation request does not match the existing primary surface. ")

                DDERR_INVALIDCAPS:
                    throw DirectDrawInvalidCapsException("CreateSurface: one or more of the capability bits is incorrect.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectExeption("CreateSurface: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("CreateSurface: one or more of the parameters passed to the method are incorrect.")

                DDERR_INVALIDPIXELFORMAT:
                    throw DirectDrawInvalidPixelFormatException("CreateSurface: an invalid pixel format was specified.")

                DDERR_NOALPHAHW:
                    throw DirectDrawNoAlphaHardwareException("CreateSurface: the video device doesn't support alpha hardware acceleration or it's unavailable.")

                DDERR_NOCOOPERATIVELEVELSET:
                    throw DirectDrawNoCooperativeLevelSetException("CreateSurface: attempting to create a surface without first setting the cooperative level.")

                DDERR_NODIRECTDRAWHW:
                    throw DirectDrawNoDirectDrawHardwareException("CreateSurface: the current device doesn't support hardware-only DirectDraw acceleration.")

                DDERR_NOEMULATION:
                    throw DirectDrawNoEmulationException("CreateSurface: software emulation isn't available.")

                DDERR_NOEXCLUSIVEMODE:
                    throw DirectDrawNoExclusiveModeException("CreateSurface: exclusive mode required to complete the operation.")

                DDERR_NOFLIPHW:
                    throw DirectDrawNoFlipHardwareException("CreateSurface: flipping visible surfaces is not supported by the video hardware.")

                DDERR_NOMIPMAPHW:
                    throw DirectDrawNoMipMapHardwareException("CreateSurface: unable to complete the operation because mipmapping isn't supported by the hardware or is not available.")

                DDERR_NOOVERLAYHW:
                    throw DirectDrawNoOverlayHardwareException("CreateSurface: unable to complete the operation because no hardware support for overlay is available.")

                DDERR_NOZBUFFERHW:
                    throw DirectDrawNoZBufferHardwareException("CreateSurface: unable to complete the operation because no hardware support for Z-ordering overlays is available")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("CreateSurface: DirectDraw does not have enough memory to perform the operation.")

                DDERR_OUTOFVIDEOMEMORY:
                    throw DirectDrawOutOfVideoMemoryException("CreateSurface: DirectDraw does not have enough display memory to perform the operation.")

                DDERR_PRIMARYSURFACEALREADYEXISTS:
                    throw DirectDrawPrimarySurfaceAlreadyExistsException("CreateSurface: a primary surface already exists.")

                DDERR_UNSUPPORTEDMODE:
                    throw DirectDrawUnsupportedModeException("CreateSurface: unable to create a surface for the current display mode, it's unsupported.")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDraw7::CreateSurface failed.", result)
            end switch
        end if

        ddSD.ddSDCaps.dwCaps := DDSCAPS_BACKBUFFER

        result := lpDDSPrimarySurface->GetAttachedSurface(&ddSD.ddSCaps, &lpDDSBack)
        if(result != DD_OK)
            switch(result)
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("GetAttachedSurface: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("GetAttachedSurface: one or more of the parameters passed to the method are incorrect.")

                DDERR_NOTFOUND:
                    throw DirectDrawNotFoundException("GetAttachedSurface: the requested item was not found.")

                DDERR_SURFACELOST:
                    throw DirectDrawSurfaceLostExeption("GetAttachedSurface: access to the surface is refused because the surface memory is gone. Call IDirectDrawSurfacce7::Restore() on this surface to restore the memory associated with it.")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDrawSurface7::GetAttachedSurface failed.", result)
            end switch
        end if

        try
            AttachClipper(hWnd)
        catch
            throw
        end try-catch
    end function
    
    function Surface CreateSurface(HBITMAP hBitmap)

        HDC hDCImage
        HDC hDC
        BITMAP bitmap
        LPDIRECTDRAWSURFACE7 lpDDSurface := NULL
        DDSURFACEDESC2 ddSD

        if(NULL = hBitmap)
            throw System::ArugmentNullException("CreateSurface: hBitmap is NULL when it shouldn't be.")
        end if


        -- retrieve needed information about the bitmap; needed to create the surface
        GetObject(hBitmap, sizeof(bitmap), &bitmap)

        SecureZeroMemory(&ddSD, sizeof(ddSD))
        ddSD.dwSize := sizeof(imageddsd)
        ddSD.dwFlags := DDSD_CAPS | DDSD_WIDTH | DDSD_HEIGHT
        ddSD.ddsCaps.dwCaps := DDSCAPS_OFFSCREENPLAIN
        ddSD.dwWidth := bitmap.Width
        ddSD.dwHeight := bitmap.Height

        VerifyNotNull(lpDD)
        result := lpDD->CreateSurface(&ddSD, &lpDDSurface, NULL)
        if(result != DD_OK)
            switch(result)
                DDERR_INCOMPATIBLEPRIMARY:
                    throw DirectDrawIncompatiblePrimarySurfaceException("CreateSurface: the primary surface creation request does not match the existing primary surface. ")

                DDERR_INVALIDCAPS:
                    throw DirectDrawInvalidCapsException("CreateSurface: one or more of the capability bits is incorrect.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectExeption("CreateSurface: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("CreateSurface: one or more of the parameters passed to the method are incorrect.")

                DDERR_INVALIDPIXELFORMAT:
                    throw DirectDrawInvalidPixelFormatException("CreateSurface: an invalid pixel format was specified.")

                DDERR_NOALPHAHW:
                    throw DirectDrawNoAlphaHardwareException("CreateSurface: the video device doesn't support alpha hardware acceleration or it's unavailable.")

                DDERR_NOCOOPERATIVELEVELSET:
                    throw DirectDrawNoCooperativeLevelSetException("CreateSurface: attempting to create a surface without first setting the cooperative level.")

                DDERR_NODIRECTDRAWHW:
                    throw DirectDrawNoDirectDrawHardwareException("CreateSurface: the current device doesn't support hardware-only DirectDraw acceleration.")

                DDERR_NOEMULATION:
                    throw DirectDrawNoEmulationException("CreateSurface: software emulation isn't available.")

                DDERR_NOEXCLUSIVEMODE:
                    throw DirectDrawNoExclusiveModeException("CreateSurface: exclusive mode required to complete the operation.")

                DDERR_NOFLIPHW:
                    throw DirectDrawNoFlipHardwareException("CreateSurface: flipping visible surfaces is not supported by the video hardware.")

                DDERR_NOMIPMAPHW:
                    throw DirectDrawNoMipMapHardwareException("CreateSurface: unable to complete the operation because mipmapping isn't supported by the hardware or is not available.")

                DDERR_NOOVERLAYHW:
                    throw DirectDrawNoOverlayHardwareException("CreateSurface: unable to complete the operation because no hardware support for overlay is available.")

                DDERR_NOZBUFFERHW:
                    throw DirectDrawNoZBufferHardwareException("CreateSurface: unable to complete the operation because no hardware support for Z-ordering overlays is available")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("CreateSurface: DirectDraw does not have enough memory to perform the operation.")

                DDERR_OUTOFVIDEOMEMORY:
                    throw DirectDrawOutOfVideoMemoryException("CreateSurface: DirectDraw does not have enough display memory to perform the operation.")

                DDERR_PRIMARYSURFACEALREADYEXISTS:
                    throw DirectDrawPrimarySurfaceAlreadyExistsException("CreateSurface: a primary surface already exists.")

                DDERR_UNSUPPORTEDMODE:
                    throw DirectDrawUnsupportedModeException("CreateSurface: unable to create a surface for the current display mode, it's unsupported.")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDraw7::CreateSurface failed.", result)
            end switch
        end if

        result := lpDDSurface->GetDC(&hDC)
        if(result != DD_OK)
            switch(result)
                DDERR_DCALREADYCREATED:
                    throw DirectDrawDCAlreadyCreatedException("GetDC: a device context has already been returned for this surface.")

                DDERR_GENERIC:
                    throw DirectDrawGenericException("GetDC: generic error occured, fucked if I know what's going on.")
                
                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("GetDC: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("GetDC: one or more of the parameters passed to the method are incorrect.")

                DDERR_INVALIDSURFACETYPE:
                    throw DirectDrawInvalidSurfaceException("GetDC: the requested operation could not be performed because the surface was of the wrong type. ")

                DDERR_SURFACELOST:
                    throw DirectDrawSurfaceLostException("GetDC: access to the surface is refused because the surface memory is gone. Call IDirectDrawSurface7::Restore to restore the memory associated with it.")

                DDERR_UNSUPPORTED:
                    throw DirectDrawUnsupportedException("GetDC: the operation is not supported.")

                DDERR_WASSTILLDRAWING:
                    throw DirectDrawWasStillDrawingException("GetDC: the previous blit operation is incomplete.")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDrawSurface7::GetDC failed.", result)
            end switch
        end if

        hDCImage := CreateCompatibleDC(NULL)
        if(hDCImage == NULL)
            throw Win32Exception(Win32Exception::Format("CreateCompatibleDC"))
        end if

        SelectObject(hDCImage, hBitmap)

        if(BitBlt(hDC, 0, 0, bitmap.Width, bitmap.Height, hDCImage, 0, 0, SRCCOPY) == 0)
            throw Win32Exception(Win32Exception::FormatMessage("BitBlt"))
        end if
        lpDDSurface->ReleaseDC(hDC)

        DeleteObject(hDCImage)

        new Surface surface(lpDDSurface, bitmap.Width, bitmap.Height)
        return surface
    end function

Public
    function void Initialise() : static
        result := DirectDrawCreateEx()
        if(result != DD_OK) 
            switch(result)
                DDER_INVALIDDIRECTDRAWGUID:
                    throw DirectDrawInvalidGUIDException("Invalid GUID passed to DirectDrawCreateEx")

                DDER_DIRECTDRAWALREADYCREATED:
                    throw DirectDrawAlreadyCreatedException("DirectDrawCreateEx: Direct Draw has already been initialised.")

                DDER_INVALIDPARAMS:
                    throw DirectDrawInvalidParametersException("DirectDrawCreateEx: Invalid parameters passed to DirectDrawCreateEx")

                DDER_GENERIC:
                    throw DirectDrawGenericException("DirectDrawCreateEx: Undefined error condition returned by DirectDrawCreateEx. Consult your local psychic.")
            
                DDERR_NODIRECTDRAWHW:
                    throw DirectDrawNoHardwareException("DirectDrawCreateEx: The specified driver doesn't support DirectDraw hardware acceleration.")

                DDERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("DirectDrawCreateEx: Not enough memory available to initialise DirectDraw.")
            
                default:
                    throw System::Runtime::InteropServices::COMException("DirectDrawCreateEx failed.", result)
            end switch
        end if
    end function

    function Clear(System::Drawing::Color ^colour)

        try
            Clear(colour->R, colour->G, colour->B)
        catch
            throw
        end try-catch

    end function

    function Clear(int r, int g, int b)

        DDBLTFX ddBltFX 

        SecureZeroMemory(&ddBltFX, sizeof(DDBLTFX))
        ddBltFX.dwFillColor := RGBTo32Bit(255, r, g, b)
        
        VerifyNotNull(lpDDSSecondarySurface)
        HRESULT result := lpDDSSecondarySurface->Blt(NULL, NULL, NULL, DDBLT_COLORFILL | DDBLT_WAIT, &ddBltFX)
        if(result != DD_OK)
            switch(result)
                DDERR_GENERIC:
                    throw DirectDrawGenericException("IDirectDrawSurface7::Blt: failed, fucked if I know why.")

                DDERR_INVALIDCLIPLIST:
                    throw DirectDrawInvalidClipListException("IDirectDrawSurface7::Blt: DirectDraw does not support the provided clip list.")

                DDERR_INVALIDOBJECT:
                    throw DirectDrawInvalidObjectException("IDirectDrawSurface7::Blt: DirectDraw received a pointer that was an invalid DirectDraw object.")

                DDERR_INVALIDPARAMS:
                    throw DirectDrawInvalidParameterException("IDirectDrawSurface7::Blt: one or more of the parameters passed to the method are incorrect.")

                DDERR_INVALIDRECT:
                    throw DirectDrawInvalidRectException("IDirectDrawSurface7::Blt: the provided rectangle was invalid.")

                DDERR_NOALPHAHW:
                    throw DirectDrawNoAlphaHardwareException("IDirectDrawSurface7::Blt: no alpha acceleration hardware is present or available.")

                DDERR_NOBLTHW:
                    throw DirectDrawNoBlitHardwareException("IDirectDrawSurface7::Blt: no blitter hardware is present.")

                DDERR_NOCLIPLIST:
                    throw DirectDrawNoClipListException("IDirectDrawSurface7::Blt: no clip list is available.")

                DDERR_NODDROPSHW:
                    throw DirectDrawNoDDRasterOperationHardwareException("IDirectDrawSurface7::Blt: no DirectDraw raster operation (ROP) hardware is available. ")

                DDERR_NOMIRRORHW:
                    throw DirectDrawNoMirrorHardwareException("IDirectDrawSurface7::Blt: the operation cannot be carried out because no mirroring hardware is present or available. ")

                DDERR_NORASTEROPHW:
                    throw DirectDrawNoRasterOperationHardwareException("IDirectDrawSurface7::Blt: the operation cannot be carried out because no appropriate raster operation hardware is present or available.")

                DDERR_NOROTATIONHW:
                    throw DirectDrawNoRotationHardwareException("IDirectDrawSurface7::Blt: the operation cannot be carried out because no rotation hardware is present or available.")

                DDERR_NOSTRETCHHW:
                    throw DirectDrawNoStretchHardwareException("IDirectDrawSurface7::Blt: the operation cannot be carried out because there is no hardware support for stretching. ")

                DDERR_NOZBUFFERHW:
                    throw DirectDrawNoZBufferHardwareException("IDirectDrawSurface7::Blt: the operation cannot be carried out because there is no hardware support for Z-buffers.")

                DDERR_SURFACEBUSY:
                    throw DirectDrawSurfaceBusyException("IDirectDrawSurface7::Blt: access to the surface is refused because the surface is locked by another thread.")

                DDERR_SURFACELOST:
                    throw DirectDrawSurfaceLostException("IDirectDrawSurface7::Blt: access to the surface is refused because the surface memory is gone. ")

                DDERR_UNSUPPORTED:
                    throw DirectDrawUnsupportedException("IDirectDrawSurface7::Blt: the operation is not supported. ")

                DDERR_WASSTILLDRAWING:
                    throw DirectDrawWasStillDrawingException("IDirectDrawSurface7::Blt: the previous blit operation that is transferring information to or from this surface is incomplete. ")

                default:
                   throw System::Runtime::InteropServices::COMException("IDirectDrawSurface7::Blt failed.", result)

            end switch
        end if
    end function

    function Surface CreateSurface(string path) : static

        HBITMAP hBitmap
      
        hBitmap := LoadImage(NULL, filename, IMAGE_BITMAP, 0, 0, LR_LOADFROMFILE)
        if(NULL = hBitmap)
            throw Win32Exception(Win32Exception::FormatMessage("LoadImage"))
        end if

       try
            return Video::CreateSurface(hBitmap)
       catch
            throw
       finally
            DeleteObject(hBitmap)
       end try-catch

    end function

    function void Restore() : static

        VerifyNotNull(lpDD)
        -- the return values mentioned on MSDN for RestoreAllSurfaces() are wrong.
        HRESULT result := lpDD->RestoreAllSurfaces()
        if(result != DD_OK)
            switch(result)
                    DDERR_GENERIC:
                        throw DirectDrawGenericException("RestoreAllSurfaces: ")

                    DDERR_IMPLICITLYCREATED:
                        throw DirectDrawImplicitlyCreatedException("RestoreAllSurfaces: ")

                    DDERR_INCOMPATIBLEPRIMARY:
                        throw DirectDrawIncompatiblePrimarySurfaceException("RestoreAllSurfaces: ")

                    DDERR_INVALIDOBJECT:
                        throw DirectDrawInvalidObjectException("RestoreAllSurface: ")

                    DDERR_INVALIDPARAMS:
                        throw DirectDrawInvalidParametersException("RestoreAllSurfaces: ")

                    DDERR_NOEXCLUSIVEMODE:
                        throw DirectDrawNoExclusiveModeException("RestoreAllSurfaces: ")

                    DDERR_OUTOFMEMORY:
                        throw System::OutOfMemoryException("RestoreAllSurfaces: ")

                    DDERR_UNSUPPORTED:
                        throw DirectDrawUnsupportedException("RestoreAllSurfaces: ")

                    DDERR_WRONGMODE:
                        throw DirectDrawWrongModeException("RestoreAllSurfaces: ")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectDraw7::RestoreAllSurfaces failed.", result)
            end switch
        end if
    end function

    function void SetDisplayMode(HWND hWnd, uint width, uint height, uchar bitsPerPixel, bool fullscreen) : static

        -- Frees the surfaces on the off chance that the function is called by the user due to DirectDrawWrongModeException being 
        -- thrown (they have to be recreated if that's the case).

        if(lpDDSPrimarySurface != NULL)
            lpDDSPrimarySurface->Release()
            lpDDSPrimarySurface := NULL
        end if

        if(lpDDSSecondarySurface != NULL)
            lpDDSSecondarySurface->Release()
            lpDDSSecondarySurface := NULL

        if(lpDDClipper != NULL)
            lpDDClipper->Release()
            lpDDClipper := NULL
        end if

        try
            if fullscreen = true
                CreateFullscreenWindow(hWnd, width, height, bitsPerPixel)
            end if
        catch
            throw;
        end try-catch
    end function

    function void Shutdown() : static
        if(lpDDSPrimarySurface != NULL)
            lpDDSPrimarySurface->Release()
            lpDDSPrimarySurface := NULL
        end if

        if(lpDDSSecondarySurface != NULL)
            lpDDSSecondarySurface->Release()
            lpDDSSecondarySurface := NULL

        if(lpDDClipper != NULL)
            lpDDClipper->Release()
            lpDDClipper := NULL
        end if

        if(lpDD != NULL)
            lpDD->Release()
            lpDD := NULL
        end if
    end function

end class