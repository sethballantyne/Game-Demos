-- Produces scenes based on the data stored within scenes.xml
-- Currently missing support for gameview, ToggleLabel and the slider.
class SceneFactory
Private

    -- Used to write messages to the Debug and Error LogManager subscribers.
    function Log(String message, ...)
        LogManager::WriteLine(LogType->Debug | LogType->Error, message, arglist)
    end function

    

    -- Reads an element whose type attribute evaluates to label, creating a new instance of Label using 
    -- the values specified within the elements attributes.
    function Label ParseLabel(XElement labelTag)

        try

            int x := XmlHelper::GetAttributeValueAsInt32(labelTag, "x")
            int y := XmlHelper::GetAttributeValueAsInt32(labelTag, "y")
            string font := XmlHelper::GetAttributeValue(labelTag, "font")
            string text := XmlHelper::GetAttributeValue(labelTag, "text")
        catch
            throw
        end try

        try
            return new Label(x, y, font, text)
        catch
            throw
    end function

    -- Reads an element containing a menu item, creating a new instance of MenuItem using the 
    -- values specified within the elements attributes.
    function MenuItem ParseMenuItem(string sceneID, XElement menuItemTag)
            
        try
            int x := XmlHelper::GetAttributeValueAsInt32(menuItemTag, "x")
            int y := XmlHelper::GetAttributeValueAsInt32(menuItemTag, "y")
            string font := XmlHelper::GetAttributeValue(menuItemTag, "font")
            string text := XmlHelper::GetAttributeValue(menuItemTag, "text")
            int selectedIndex := XmlHelper::GetAttributeValueAsInt32(menuItemTag, "selectedIndex")
            string navigateTo := XmlHelper::GetAttributeValue(menuItemTag, "navigateTo")
            
            string navigationArgs := NULL

            try
                navigationArgs := XmlHelper::GetAttributeValue(menuItemTag, "navigationArgs")
                if(navigationArgs = "self")
                    navigationArgs := sceneID
                end if

            catch
                -- navigationArgs is an optional attribute, so ignore errors. 
            end try

        catch
            throw
        end try

            MenuItem menuItem
            try
                if(navigationArgs = NULL)
                    menuItem := new MenuItem(x, y, font, text, selectedIndex, navigateTo)
                else 
                    menuItem := new MenuItem(x, y, font, text, selectedIndex, navigateTo, navigationArgs)
                end if

                return menuItem
            catch
                throw
            end try

    end function

    function HighScoreTable ParseHighScoreTable(XElement element, MenuItemContainer parentContainer)
        try
            -- reading <containerItem>
            int x := XmlHelper::GetAttributeValueAsInt32(element, "x")
            int y := XmlHelper::GetAttributeValueAsInt32(element, "y")
            int selectedIndex := XmlHelper::GetAttributeValueAsInt32(element, "selectedIndex")
            int numberOfRows := XmlHelper::GetAttributeValueAsInt32(element, "rows")
            
            -- reading <row>
            XElement[] rowsQuery := controlsTag->Descendants("rows")->ToArray()
            if(rowsQuery == NULL || rowsQuery->Count < 1)
                throw System::Xml::XmlException("HighScoreTable: <rows> element is missing")
            end if
           
            int verticalSpacing := XmlHelper::GetAttributeValueAsInt32(rowsQuery[0], "verticalSpacing")

            -- reading <column>
            XElement[] columnQuery := rowsQuery[0]->Descendants("column")->ToArray()
            if(columnQuery == NULL || columnQuery->Count < 3)
                throw System::Xml::XmlException("HighScoreTable: not enough <column> elements defined for the highscore table.")
            end if

            int indexXPosition 
            int playerNameXPosition
            int scoreXPosition
            string indexFont
            string playerNameFont
            string scoreFont

            for(i := 0 to columnQuery->Count - 1)
                string id := XmlHelper::GetAttributeValue(columnQuery[i], "id")

                if(id = "index")
                    indexXPosition := XmlHelper::GetAttributeValueAsInt32(columnQuery[i], "x")
                    indexFont := XmlHelper::GetAttributeValue(columnQuery[i], "font")
                else if(id = "playerName")
                    playerNameXPosition := XmlHelper::GetAttributeValueAsInt32(columnQuery[i], "x")
                    playerNameFont := XmlHelper::GetAttributeValue(columnQuery[i], "font")
                else if(id = "score")
                    scoreXPosition := XmlHelper::GetAttributeValueAsInt32(columnQuery[i], "x")
                    scoreFont := XmlHelper::GetAttributeValue(columnQuery[i], "font")
                else
                    throw Sytem::Xml::XmlException("HighScoreTable: id attribute in column element has an illegal value\n") 
                end if
            end for

            return new HighScoreTable(x, y, selectedIndex, numberOfRows, verticalSpacing, indexXPosition, indexFont,
                                      playerNameXPosition, playerNameFont, scoreXPosition, scoreFont, parentContainer)
        catch
            throw 
        end try
    end function


    function KeyConfigLabel ParseKeyConfigLabel(XElement element, MenuItemContainer parentContainer)
        try
             int x := XmlHelper::GetAttributeValueAsInt32(element, "x")
             int y := XmlHelper::GetAttributeValueAsInt32(element, "y")
             string font := XmlHelper::GetAttributeValue(element, "font")
             int selectedIndex := XmlHelper::GetAttributeValueAsInt32(element, "selectedIndex")
             string optionsKey := xmlHelper::GetAttributeValue(element, "optionsKey")

             return new KeyConfigLabel(x, y, font, selectedIndex, optionsKey, parentContainer)
        catch
            throw
        end try
    end function

Public
    -- Parses the XML file containing scene information, returning an array of Scenes based on the information read.
    function Scene[] Read(XDocument xml)
        new List<Scene> SceneList

        -- <scene>
        IEnumerable<XElement> sceneQuery := xmlDocument->Root->Descendants("scene")
        foreach(sceneTag in sceneQuery)
            
            XAttribute sceneID := sceneTag->Attribute("id")
            XAttribute initialScene := sceneTag->Attribute("initialScene")

            if(sceneID = NULL)
                Log("Scene is missing the id attribute, skipping.")
            else if(sceneID->Value = String.Empty)
                Log("The scene's ID attribute contains an empty string, skipping.")
            end if

            bool isInitialScene := false
            try
                if(isInitialScene != NULL)
                    isInitialScene := Convert::ToBoolean(initialScene->Value)
                end if
            catch
                Log("initialScene attribute for {0} contains an invalid value.", sceneID->Value)
            end try

            Scene scene 
            if(isInitialScene)
                scene := new Scene(sceneID->Value, isInitialScene)
            else
                scene := new Scene(sceneID->Value)
            end if

            -- grabbing the <controls> element
            IEnumerable<XElement> controlsQuery := sceneTag->Descendants("controls")
            foreach(controlsTag in controlsQuery)

                new List<Control[]> sceneControls 

                -- read each <control> tag
                IEnumerable<XElement> controlQuery := controlsTag->Descendants("control")
                foreach(controlTag in controlQuery)

                    XAttribute typeAttribute := controlTag->Attribute("type")
                    if(typeAttribute = NULL)
                        Log("scene {0} contains a control tag that's missing the type attribute.", sceneID->Value)
                    else
                        string typeAttributeValue := typeAttribute->Value
                        if(typeAttributeValue = "label")
                            try
                                Label label := ParseLabel(controlTag)
                                scene->GetControlList()->Add(label)
                            catch(Exception e)
                                Log("Failed to read a label element for the scene {0}. {1}", sceneID->Value, e->Message)

                                continue
                            end try

                        else if(typeAttributeValue = "menuItemContainer")
                            IEnumerable<XElement> containerItemQuery := controlTag->Descendants("containerItem")

                            new MenuItemContainer menuItemContainer

                            foreach(containerItemTag in menuItemQuery)

                                XAttribute typeAttribute := containerItemTag->Attribute("type")

                                if(typeAttribute = NULL)
                                    Log("scene {0} contains a menuItemContainer child control that's missing the type attribute.", sceneID->Value)
                                else
                                        try
                                            -- Items are registered with the parent MenuItemContainer through the property called in the
                                            -- specific controls constructor.

                                            if(typeAttribute->Value = "menuItem")
                                                MenuItem menuItem := ParseMenuItem(sceneID->Value, containerItemTag, menuItemContainer)
                                            else if(typeAttribute->Value = "HighScoreTable")
                                                HighScoreTable highScoreTable := ParseHighScoreTable(containerItemTag, menuItemContainer)
                                            else if(typeAttribute->Value = "keyConfigLabel")
                                                KeyConfigLabel keyConfigLabel := ParseKeyConfigLabel(containerItemTag, menuItmContainer)
                                            end if
                                        catch
                                             Log("Failed to read a containerItem element for the scene {0}. {1}", sceneID->Value, e->Message)
                                        end try
                                end if
                            end foreach
                            scene->GetContolList()->Add(menuItemContainer)
                        else if(typeAttributeValue = String.Empty)
                            Log("type attribute for a control belonging to {0} is empty.", sceneID->Value)
                        else
                            Log("Unknown control type {0} in scene {1}", typeAttributeValue, sceneID->Value)
                        end if
                    end if
                end foreach
            end foreach

            sceneList->Add(scene)
        end foreach

        return sceneList->ToArray()
    end function
end class