function HRESULT CALLBACK WindowProc(HWND hWnd, UINT uMsg, WPARAM wParam, LPARAM lParam)
    
    switch(umsg)
        WM_SIZE:
            if(wParam = SIZE_MAXHIDE || wParam == SIZE_MINIMIZED)
                Game::IsWindowActive := false
            else
                Game::IsWindowActive := true
            end if

        WM_SYSCOMMAND:
            switch(wParam)
                SC_MOVE, SC_SIZE, SC_MAXIMIZE, SC_MONITORPOWER:
                    return true
            end switch  

        WM_DESTROY:
            -- perform clean up here
            PostQuitMessage(0)

        default
            break

    end switch

    return DefWindowProc(hWnd, msg, wParam, lParam)
end function

function int WINAPI WinMain(HINSTANCE hInstance, HINSTANCE hPrevInstance, LPSTR lpCmdLine, int nCmdShow)

    WNDCLASSEX windowClass
    MSG msg
    LPCWSTR windowClassName
    HWND hWnd

    windowClass.cbClsExtra := 0
    windowClass.cbWndExtra := 0
    windowClass.hbrBackground := (HBRUSH) GetStockObject(BLACK_BRUSH)
    windowClass.hCursor := LoadCursor(NULL, IDC_ARROW)
    windowClass.hIcon := LoadIcon(NULL, IDI_APPLICATION)
    windowClass.hInstance := hInstance
    windowClass.lpfnWndProc := WindowProc
    windowClass.lpszClassName := windowClassName
    windowClass.lpszMenuName := NULL
    windowClass.hIconSm := NULL
    windowClass.style := CS_DBLCLKS | CS_OWNDC | CS_HREDRAW | CS_VREDRAW
    windowClass.cbSize := sizeof(WNDCLASSEX)

    if(RegisterClassEx(&windowClass) = 0)
        MessageBox(
            NULL, 
            L"Failed to register the window class.", 
            L"Unholy Error", 
            MB_OK | MB_ICONEXCLAMATION
        )

        return -1;
    end if

    -- VER_PRODUCTNAME_STR will live in version.h
    hWnd := CreateWindowEx(
        NULL,                               -- extended window style
        windowClassName,                   
        VER_PRODUCTNAME_STR,                -- window title
        WS_POPUP | WS_VISIBLE               -- window style flags
        0,                                  -- x pos
        0,                                  -- y pos
        400,                                -- window width
        400,                                -- width height
        NULL,                               -- handle to parent window,
        NULL,                               -- menu handle,
        hInstance,                          -- handle to the windows module instance,
        NULL                                -- pointer to extras if needed
    )

    if(!hWnd)
        MessageBox(
            NULL, 
            L"CreateWindowEx failed.", 
            L"Unholy Errooooooor.", 
            MB_OK | MB_ICONEXCLAMATION
        )

        return -1;
    end if

    ShowWindow(hWnd, SW_SHOWNORMAL)
    
    try
    
        Game::Initialise()

        while(Game::IsRunning)
            if(PeekMessage(&msg, NULL, 0, 0, PM_REMOVE))
                if(msg.message != WM_QUIT)
                    TranslateMessage(&msg)
                    DispatchMessage(&msg)
                else
                    Game::IsRunning := FALSE
                end if
            end if

            --NOTE: only update the game when the window is active.
            if(Game::IsWindowActive)
                Game::Update()
                Game::Render()
            end if
        end while
    catch(Exception e)
        LogManager::WriteLine(
        LogType->Error | LogType->Debug, 
        "Fatal error: {0}\n\nStack trace: {1}", e->Message, e->StackTrace)
    finally
    
        Game::Shutdown()
    end try

    -- windows doesn't actually make use of the return code, make it whatever you like.
    return msg.wParam
end function