class HighScoreTable inherits ContainerControl
Private
    new List<HighscoreRow> rows
    int rowSpacing
    bool enabled := false
    int rowBeingEdited
    int newHighScore
Public
    -- Exceptions: 
    -- System::ArgumentNullException: either rowNumberFont, playerNameFont, scoreFont or parentContainer is NULL.
    -- System::ArgumentException: either rowNumberFont, playerNameFont, or scoreFont evaluates to String::Empty.
    constructor(int x, int y, int selectedIndex, int numberOfRows, int verticalSpacing, int indexXPosition,
    string rowNumberFont, int playerNameXPosition, string playerNameFont, int scoreXPosition, string scoreFont,
    MenuItemContainer parentContainer) : ContainerControl(x, y, parentContainer, selectedIndex)

        if(rowNumberFont = NULL)
            throw ArgumentNullException("rowNumberFont")
        else if(playerNameFont = NULL)
            throw ArgumentNullException("playerNameFont")
        else if(scoreFont = NULL)
            throw ArgumentNullException("scoreFont")
        else if(parentContainer = NULL)
            throw ArgumentNullException("parentContainer")
        end if

        if(rowNumberFont = String::Empty)
            throw ArgumentException("rowNumberFont")
        else if(playerNameFont = String::Empty)
            throw ArgumentException("playerNameFont")
        else if(scoreFont = String::Empty)
            throw ArgumentException("scoreFont")
        end if

        for(i := 0 to numberOfRows)
            int rowYPosition := y + (i * verticalSpacing)

            new Point indexPosition(indexXPosition, rowYPosition)
            new Point playerNamePosition(indexXPosition, rowYPosition)
            new Point scorePosition(indexXPosition, rowYPosition)

            new HighScoreRow newHighScoreRow(rowNumberFont, indexPosition, playerNameFont, 
                                       playerNamePosition, scoreFont, scorePosition)

            newHighScoreRow->Index->Text := Convert::ToString(i)
            newHighScoreRow->PlayerName->Text := HighScores::GetPlayerName(i)
            newHighScoreRow->Score->Text := Convert::ToString(HighScores::GetHighScore(i))

            rows->Add(newHighScoreRow)         
        end for
    end constructor 

    function ReceiveSceneArgs(object[] args)
        if(args != NULL)
            if(args->Count > 1 && ((args[0] is type(int)) && (args[1] is type(int))))
                if(args[0] <= rows->Count - 1)
                    self->rowBeingEdited := args[0]
                    self->newHighScore := args[1]

                    rows[self->rowBeingEdited]->PlayerName->EditModeEnabled := true
                    self->enabled := true
                end if
            end if
        end if
    end function


    function Update(Keys keyboardState, Mouse mouseState)
        if(keyboardState = NULL)
            throw ArgumentNullException("keyboardState")
        end if

        if(enabled)
            rows[self->rowBeingEdited]->PlayerName->Update(keyboardState, mouseState)
            
            -- possible bug here; will report true if enter is pressed along with other keys
            -- which may not be the intended desire. Make sure to test.
            if(keyboardState->KeyPressed(DIK_ENTER))
                enabled := false

                string newPlayerName := rows[self->rowBeingEdited]->PlayerName->Text
                HighScores::Update(self->rowBeingEdited, newPlayerName, newHighScore)

                parentContainer->SelectNextControl()
            end if

        end if
    end if

    function Render()
        for(i := 0 to rows->Count - 1)
            rows[i]->Render()
        end for
    end function

    -- Assigns the HighscoreTable to the specified container. When assigning a container,
    -- HighScoreTable adds itself to the containers control list.
    -- Exceptions:
    -- ArgumentNullException: attempting to assign a NULL value.
    --property MenuItemContainer ParentContainer

     --   accessors
     --       get
     ---           return parentContainer
     --       set
     --           if(value = NULL)
     --               throw ArgumentNullException("Nope")
     --
      --          parentContainer := value
     --           parentContainer->Controls->Add(self)
     --   end accessors

    --end property
end class