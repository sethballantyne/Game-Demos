-- Acts as a database for the games highsores. If any other object in the game requires highscore
-- data, it has to request it from this class. When a new highscore is given to the class, it updates
-- both its records in memory and the highscores stored on disk.
class HighScores : static 
Private
    new List<HighScoreRecord> highScores
    FileStream fileStream
    BinaryReader binaryReader
    BinaryWriter binaryWriter
Public
    -- Attempts to read the Highscores into memory. This function should only be called once during the life-time of
    -- of the application. 
    -- Exceptions:
    -- System::ArgumentNullException: filename is NULL.
    -- System::ArgumentException: filename evaluates to String::Empty.
    -- System::NotSupportedException: filename refers to a non-file device.
    -- System::Security::SecurityException: the caller doesn't have the required permission.
    -- System::IO::DirectoryNotFoundException: the specified path is invalid, such as being on an unmapped drive. 
    -- System::UnauthorizedAccessException: access to the specified path was denied by the operating system.
    -- System::IO::PathTooLongException: the length of filename exceeds the maximum length allowed for a path.
    -- System::IO::EndOfStreamException: prematurely reached the end of the file while trying to read the highscores into memory.
    -- System::IO::IOException: an unspecified I/O error occured.
    function Initialise(string filename)
        if(fileName = NULL)
            throw ArgumentNullException("filename")
        else if(fileName := String::Empty)
            throw ArgumentException("filename")

        try
            new fileStream(filename, FileMode::OpenOrCreate, FileAccess::ReadWrite)
            new binaryReader(fileStream, Encoding::ASCII)
            new binaryWriter(fileStream, Encoding::ASCII)

            if(fileStream->Length != 0)   
                uint numberOfEntries := binaryReader->ReadUint32()

                for(i := 0 to numberOfEntries - 1)
                    new HighScoreRecord highScoreRecord

                    highScoreRecord->PlayerName := binaryReader->ReadBytes(highScoreEntry->PlayerName->Length)
                    highScoreRecord->Score := binaryReader->ReadUint32()

                    highScores->Add(highScoreEntry)
                end for
            end if
        catch
            throw
        end try
    function

    -- Inserts the specified player name and score into the specified highscore position. Call HighScores::IsAHighScore()
    -- to verify a score belongs in the highscore table before calling this function. HighScores::Update updates both
    -- the scores stored in memory and the data stored on disk.
    -- Exceptions:
    -- System::ArgumentNullException: playerName is NULL.
    -- System::ArgumentOutOfRangeException: row is greater than the number of entries on the highscore table.
    -- System::IO::IOException: an unspecified IO error occured while writing to disk.
    function Update(uint row, string playerName, uint newHighScore)
        if(row > highScores->Count)
            throw ArgumentOutOfRangeException("row is invalid")
        else if(playerName = NULL)
            throw ArgumentNullException("playerName")
        end if

        highScores[row]->PlayerName := Encoding::ASCII::GetBytes(playerName)
        highScores[row]->Score := newHighScore

        -- High scores are written out because waiting until the application 
        -- terminates may result in high scores not being saved (ie, the game crashes).
        -- It'd be wonderfully ironic if this results in scores not being saved! 
        try
            fileStream->Flush()
            fileStream->SetLength(0)
            BinaryWriter->WriteUInt32(highScores->Count)

            for(i := 0 to highScores->Count - 1)
                BinaryWriter->WriteBytes(highScores[i]->PlayerName->Length)
                BinaryWriter->WriteUInt32(highScores[i]->Score)
            end for
    end function

    -- returns the score belonging to the specified position on the highscore table.
    -- Exceptions:
    -- System::ArgumentOutOfRangeException: the value of position exceeds the number of positions on the highscore table.
    function uint GetHighScore(uint position)
        if(position < highScores->Count)
            return highScores[position]->Score
        else
            throw System::ArgumentOutOfRangeException("position is greater than the number of entries on the highscore table.")
        end if
    end function

    -- returns player name belonging to the specified position on the highscore table. 
    -- Exceptions:
    -- System::ArgumentOutOfRangeException: the value of position exceeeds the number of positions on the highsore table.
    function string GetPlayerName(uint row)
        if(row < highScores->Count)
            return highScores[row]->PlayerNameAsString    
        else
            throw System::ArgumentOutOfRangeException("position is greater than {0}", highScores->Count - 1)
        end if
    end function

    -- Checks if score is greater than any of the existing scores on the highscore table, from the top down.
    -- If a lower score is found, the position of that score is returned, else it returns -1. 
    -- The position returned is zero-based.
    function int IsAHighScore(uint score)
        for(i := 0 to highScores->Count - 1)
            if(score > highScores[i]->Score)
                return i
        end for

        return -1
    end function

    -- Closes the highscores file and frees the memory allocated by the class. When this function is called,
    -- none of Highscore's methods can be called until the object is reinitialised via HighScores::Initialise().
    function void Shutdown()
        binaryReader->Close()
        binaryWriter->Close()
        fileStream->Close()

        fs->Dispose()
        binaryReader->Dispose()
        binaryWriter->Dispose()
    end function
end class