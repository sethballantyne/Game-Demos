class MenuItemContainer inherits SelectableControl
private

    -- controls contained within the container. Each control depends on the container to instruct it to render 
    -- and pass on arguments received from the Scene they belong to each time the scene is displayed. 
    new List<SelectableControl> items

    -- used to sort the controls by their SelectedIndex property every time one is added to the control list. 
    new Comparison<SelectedObject> comparisonDelegate(&SortMethod)

    -- the cursor to be displayed next to a child control, indicating it's the control that is selected.
    Surface menuItemCursor := NULL

    -- The arguments passed by the Scene object each time the scene is shown to the user. 
    string receivedArguments := NULL

    -- the index of the currently selected item in the items list. This is used to determine which control 
    -- is to be selected next, based on whether the user presses up (select previous control) 
    -- or down (select the next control).
    int currentSelectedItem := 0

    -- sort by calling items->Sort(comparisonDelegate)
    function int SortMethod(SelectableControl a, SelectableControl b) : static
        return a->CompareTo(b)
    end function

public
    
    constructor MenuItemContainer()

        menuItemCursor := ResourceManager::GetSurface("menu_cursor")

    end constructor

     -- Stores and forwards the arguments passed by the Scene to each control located within the container. 
     function ReceiveSceneArgs(string args)
        self->navigationArguments := args

        for(i := 0 to items->Count - 1)
            items[i]->ReceiveSceneArgs(args)
        end for
    end function 

    -- Selects the previous control in the items list, based on the position of the currently selected control. 
    -- If the first item is currently selected, the last item in the list will be selected. Selecting an item 
    -- postions the cursor next to it and receives the keyboard and mouse state each frame. 
    function SelectPreviousControl()

        if(list->Count = 1)
            return
        end if

        items[currentSelectedItem].IsSelected := false
         
        if(currentSelectedItem = 0)
            currentSelectedItem := items.Count - 1
        else 
            currentSelectedItem--
        end if

        items[currentSelectedItem].IsSelected := true

    end function

    -- Selects the next item in the items list, based on the position of the currently selected item. 
    -- If the currently selected item is the last item in the list, the first item will be selected. 
    -- Selecting an item postions the cursor next to it and receives the keyboard and mouse state each frame. 
    function SelectNextControl()
        if(list->Count = 1)
            return
        end if

        items[currentSelectedItem].IsSelected := false

        if(currentSelectedItem = items.Count - 1)
            currentSelectedItem := 0
        else
            currentSelectedItem++
        end if

        items[currentSelectedItem].IsSelected := true

    end function    

    -- Passes the state of the keyboard and mouse to each control within the container.
    function Update(Keys keyboardState, Mouse mouseState)

        if(keyboardState = NULL)
            ArgumentNullException("keyboardState")
        end if

        for(i := 0 to items->Count - 1)
            items->Update(keyboardState, mouseState)
        end for

    end function

    -- Draws the cursor next to the selected menu item and then instructs all items within the container to render themselves.
    function Render()

        for(i := 0 to items->Count - 1)

            -- only one item should be selected; bug otherwise.
            if(items[i]->IsSelected)
                int cursorXPos := items[i]->Position->X - menuItemCursor->Width - sizeOfGapBetweenCursorAndMenuItems
                
                Video::Blit(menuItemCursor, cursorXPos, items[i]->Position->Y)
            end if

            items[i]->Render()
        end for

    end function
end class