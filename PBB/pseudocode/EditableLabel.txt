class EditableLabel
Private
    $define KEY_SPACE 32
    $define KEY_TILDE 126

    Font font := NULL
    uint currentPosition := 0
    int stringLength
    byte[] text := NULL
    bool editMode := false
Public
    constructor(int x, int y, Font font, byte length) : Control(x, y)

        if(font = NULL)
            throw ArgumentNullException("font")
        end if

        self->font = font
        new text[length]
        self->stringLength := length
    end constructor

    function void Update(Keys keyboardState, Mouse mouseState)
        if(keyboardState = NULL)
            throw ArgumentNullException("keyboardState")
        end if

        if(editMode = TRUE)
            int dikCode := keyboardState::PressedKey
            if(dikCode != -1)
                uint asciiCode := Input::DIKToASCII(dikCode)

                if(asciiCode >= KEY_SPACE && asciiCode <= KEY_TILDE)
                    if(currentPosition < (text->Length - 1))
                        text[currentPosition] := asciiCode
                        currentPosition++
                    end if
                else
                    switch(dikCode)
                        VIK_BACKSPACE:
                            if(currentPosition != 0)
                                text[currentPosition] := 0
                                currentPosition--
                            end if

                        VIK_ENTER:
                            editMode := FALSE
                        default:
                            break
                    end switch
                end if
            end if
        end if
    end function

    function Render()
        int renderX := 0

        for(i = 0 to text->Length - 1)
            renderX := self->position->X + (i * font->GlyphWidth)

            if(text[i] != 0)
                self->font->Render(renderX, self->position->Y, text[i])
            else
                break
        end for

        if(editMode = TRUE)
            self->font->Render(renderX, position->Y, 95)
        end if
    end function

    property bool EditModeEnabled 
        get
            return self->editMode
        set
            if(value = true)
                Array::Clear(text, 0, text->Length)
            end if

            self->editMode := value
    end property

    property string Text 
        get
            return System::Text::Encoding::ASCII::GetString(text)
        set
            byte[] byteString := Encoding::ASCII::GetBytes(value)
            int upperBound 

            if(byteString->Count > self->stringLength)
                upperBound := self->stringLength
            else
                upperBound := byteString->Count - 1
            end if
             
            for(i := 0 to upperBound)
                if((byteString[i] < 32 && byteString[i] > 126)) && byteString[i] != 0)
                        throw ArgumentException("only ASCII values 0, 32 to 126 are accepted.")
                    end if
                else
                    self->text[i] := byteString[i]
                end if
            end for
    end property

end class