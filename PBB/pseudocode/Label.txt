-- A non-interactive (from the users perspective) string of text that's displayed in a scene. 
class Label inherits Control
private
    Font font := NULL
    string text := NULL
public
    -- Exceptions:
    -- System::ArgumentNullException: font is NULL.
    -- System::ArgumentException: font evaluates to String::Empty.
    -- ResourceNotFoundException: the specified font doesn't exist within the resource manager.
    constructor Label(int x, int y, string font, string text) : Control(x, y)
        
        if(font = NULL)
            throw ArgumentNullException("font")
        else if(font = String::Empty)
            throw ArgumentException("font")
        end if

        -- not throwing an exception here because sometimes controls that make use of Label
        -- don't have anything to pass to the control in terms of text during initialisation.
        -- the log message is intended as a heads up incase it really is an accident.
        -- Attempting to render it when it's NULL will throw an exception, however.
        if(text = NULL)
            LogManager::WriteLine(LogType->Debug, "Label::ctor: self->text evaluates to NULL.")
        end if
            
        try
            labelFont := ResourceManager::GetFont(font)
        catch
            throw
        end try

        self->text := text
    end constructor

    -- Renders the label's text to the backbuffer.
    -- System::ArgumentNullException: text is NULL
    -- DirectDrawGenericException: a non-specific DirectDraw error has occured.
    -- DirectDrawInvalidClipListException: DirectDraw does not support the provided clip list.
    -- DirectDrawInvalidObjectException: DirectDraw received a pointer that was an invalid DirectDraw object.
    -- DirectDrawInvalidParametersException: one or more of the parameters passed to the method are incorrect.
    -- DirectDrawInvalidRectException: the provided rectangle was invalid.
    -- DirectDrawNoAlphaHardwareException: no alpha acceleration hardware is present or available, 
    --                                     causing the failure of the requested operation.
    -- DirectDrawNoBlitHardwareException: no blitter hardware is present.
    -- DirectDrawNoClipListException: no clip list is available.
    -- DirectDrawNoDDRaserOperationHardwareException: no DirectDraw raster operation (ROP) hardware is available.
    -- DirectDrawNoMirrorHardwareException: the operation cannot be carried out because no mirroring hardware is present or available.
    -- DirectDrawNoRasterOperationHardwareException: the operation cannot be carried out because no appropriate raster operation hardware is present or available.
    -- DirectDrawNoRotationHardwareException: the operation cannot be carried out because no rotation hardware is present or available.
    -- DirectDrawNoStretchHardwareException: the operation cannot be carried out because there is no hardware support for stretching.
    -- DirectDrawNoZBUfferHardwareException: the hardware doesn't have Z buffer support.
    -- DirectDrawSurfaceBusyException: the specified surface locked by another thread and access has been refused.
    -- DirectDrawSurfaceLostException: access to the surface is refused because the surface memory is gone.
    -- DirectDrawUnsupportedException: the operation isn't supported.
    -- DirectDrawWasStillDrawingException: the previous blit operation that is transferring information to or from this surface is incomplete.
    -- System::Runtime::InteropServices::COMException: An unspecified COM+ error occured.
    function Render()
        try
            labelFont->Render(self->position->X, self->Position->Y, text)
        catch
            throw
        end try
    end function

    property Font Font
        accessors
            get
                return self->font
        end accessors
    end property

    property string Text
        accessors
            get
                return text
            set
                text := value

                -- not throwing an exception for the same reasons specified in the ctor.
                if(text = NULL)
                    LogManager::WriteLine(LogType->Debug, "Label::Text: assigned a string that evaluates to NULL.")   
                end if
        end accessors
    end property
end class