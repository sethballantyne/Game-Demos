class MenuItem inherits SelectableControl
private
    Label label := NULL
    string navigateTo := NULL
    string navigationArgs := NULL
    MenuItemContainer parentContainer := NULL

protected
    #SelectableControl bool selected

public
    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo) 

        if(font = NULL)
            throw ArgumentNullException("font")
        else if(text = NULL)
            throw ArgumentNullException("text")
        else if(navigateTo = NULL)
            throw ArgumentNullException("navigateTo")
        end if

        if(font = String::Empty)
            throw ArgumentException("font")
        else if(text = String::Empty)
            throw ArgumentException("text")
        else if(navigateTo = String::Empty)
            throw ArgumentException("navigateTo")
        end if


        SelectableControl(selectedIndex)

        try
            label := new Label(x, y, font, text)
        catch
            throw
        end try

        self->navigateTo := navigateTo

    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, string navigationArgs)

        try
            self(x, y, font, text, selectedIndex, navigateTo)
        catch
            throw
        end try

        self->navigationArgs := navigationArgs

    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, MenuItemContainer parentContainer)
       
        if(parentContainer = NULL)
            throw ArgumentNullException("parentContainer")
        end if

        try
            self(x, y, font, text, selectedIndex, navigateTo)
        catch
            throw
        end try

        self->parentContainer := parentContainer
    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, string navigationArgs, 
                         MenuItemContainer parentContainer)

        if(parentContainer = NULL)
            throw ArgumentNullException("parentContainer")
        end if

        try
            self(x, y, font, text, selectedIndex, navigateTo, navigationArgs)
        catch
            throw
        end try

        self->parentContainer := parentContainer

    end constructor

    function void Update(Keys keyboardState, Mouse mouseState)

        if(keyboardState->KeyDown(DIK_UP))
            parent->SelectPreviousControl()
        else if(keyboardState->KeyDown(DIK_DOWN))
            parent->SelectNextControl()
        else if(keyboardState->KeyDown(DIK_ENTER))
            if(navigateTo != NULL)
                SceneManager::SetActiveScene(navigateTo, navigationArgs)
            end if
        end if

    end function

    function Render()
        
        if(#selected)
            
        end 

    end function

    -- Assigns the MenuItem to the specified container. When assigning a container,
    -- MenuItem adds itself to the containers control list.
    -- Exceptions:
    -- ArgumentNullException: attempting to assign a NULL value.
    property MenuItemContainer ParentContainer

        accessors
            get
                return parentContainer
            set
                if(value = NULL)
                    throw ArgumentNullException("Nope")

                parentContainer := value
                parentContainer->Controls->Add(self)
        end accessors

    end property
end class