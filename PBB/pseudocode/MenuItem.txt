-- MenuItems are interactive labels that are primarily used to transition between scenes.

class MenuItem inherits SelectableControl
private
    -- Labels and MenuItems are the same in the sense that they both are a string of text
    -- rendered to the screen, so an internal copy of a label is kept to handle this aspect
    -- of the menu item. 
    Label label := NULL

    -- the scene that should be displayed if the user hits the select key (currently the enter key)
    string navigateTo := NULL

    -- arguments that were read from the controls "navigationArgs" attribute in the XML file.
    -- these are passed to the new scene when a scene transition is requested.
    string outboundArgs := NULL

    -- Instance of MenuItemContainer that this control belongs to.
    MenuItemContainer parentContainer := NULL

    -- arguments that were passed to the scene and subsequently this control, when the scene
    -- this control belongs to became visible to user. 
    string receivedArgs := NULL
protected
    #SelectableControl bool selected

public
    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo) 

        if(font = NULL)
            throw ArgumentNullException("font")
        else if(text = NULL)
            throw ArgumentNullException("text")
        else if(navigateTo = NULL)
            throw ArgumentNullException("navigateTo")
        end if

        if(font = String::Empty)
            throw ArgumentException("font")
        else if(text = String::Empty)
            throw ArgumentException("text")
        else if(navigateTo = String::Empty)
            throw ArgumentException("navigateTo")
        end if


        SelectableControl(selectedIndex)

        try
            label := new Label(x, y, font, text)
        catch
            throw
        end try

        self->navigateTo := navigateTo

    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, string navigationArgs)

        try
            self(x, y, font, text, selectedIndex, navigateTo)
        catch
            throw
        end try

        self->outboundArgs := navigationArgs

    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, MenuItemContainer parentContainer)
       
        if(parentContainer = NULL)
            throw ArgumentNullException("parentContainer")
        end if

        try
            self(x, y, font, text, selectedIndex, navigateTo)
        catch
            throw
        end try

        self->parentContainer := parentContainer
    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, string navigationArgs, 
                         MenuItemContainer parentContainer)

        if(parentContainer = NULL)
            throw ArgumentNullException("parentContainer")
        end if

        try
            self(x, y, font, text, selectedIndex, navigateTo, navigationArgs)
        catch
            throw
        end try

        self->parentContainer := parentContainer

    end constructor

    -- Updates the controls state, based on the keys that have been pressed. 
    function void Update(Keys keyboardState, Mouse mouseState)

        if(keyboardState->KeyDown(DIK_UP))
            parent->SelectPreviousControl()
        else if(keyboardState->KeyDown(DIK_DOWN))
            parent->SelectNextControl()
        else if(keyboardState->KeyDown(DIK_ENTER))
            if(navigateTo != NULL)
                if(navigateTo = "terminate")
                    Game::Quit()
                else if(navigateTo = "caller")
                    navigateTo := receivedArgs
                end if
                --parentContainer->WeNeedToBoogy(navigateTo, navigationArgs)
                
                SceneManager::SetActiveScene(navigateTo, outboundArgs)
            end if
        end if

    end function

    -- Assigns the MenuItem to the specified container. When assigning a container,
    -- MenuItem adds itself to the containers control list.
    -- Exceptions:
    -- ArgumentNullException: attempting to assign a NULL value.
    property MenuItemContainer ParentContainer

        accessors
            get
                return parentContainer
            set
                if(value = NULL)
                    throw ArgumentNullException("Nope")

                parentContainer := value
                parentContainer->Controls->Add(self)
        end accessors

    end property

    -- stores the arguments passed by the scene when it was set as the active scene. 
    function ReceiveSceneArgs(string args)
        receivedArgs := args
    end function

    -- Blits the MenuItem to the backbuffer. 
    function Render()
        try
            self->label->Render()
        catch
            throw
        end try
    end function
end class