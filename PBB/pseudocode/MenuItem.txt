-- MenuItems are interactive labels that are primarily used to transition between scenes.

class MenuItem inherits ContainerControl
private
    -- Labels and MenuItems are the same in the sense that they both are a string of text
    -- rendered to the screen, so an internal copy of a label is kept to handle this aspect
    -- of the menu item. 
    Label label := NULL

    -- the scene that should be displayed if the user hits the select key (currently the enter key)
    string navigateTo := NULL

    -- arguments that were read from the controls "navigationArgs" attribute in the XML file.
    -- these are passed to the new scene when a scene transition is requested.
    string outboundArgs := NULL

    -- Instance of MenuItemContainer that this control belongs to.
    --MenuItemContainer parentContainer := NULL

    -- arguments that were passed to the scene and subsequently this control, when the scene
    -- this control belongs to became visible to user. 
    object[] receivedArgs := NULL
protected
    #SelectableControl bool selected

public
    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, 
                         MenuItemContainer parentContainer) : ContainerControl(x, y, parentContainer, selectedIndex)

        if(font = NULL)
            throw ArgumentNullException("font")
        else if(text = NULL)
            throw ArgumentNullException("text")
        else if(navigateTo = NULL)
            throw ArgumentNullException("navigateTo")
        end if

        if(font = String::Empty)
            throw ArgumentException("font")
        else if(text = String::Empty)
            throw ArgumentException("text")
        else if(navigateTo = String::Empty)
            throw ArgumentException("navigateTo")
        end if

        try
            label := new Label(x, y, font, text)
        catch
            throw
        end try

        self->navigateTo := navigateTo

        -- calling the property! the control has to be registered 
        --self->ParentContainer := parentContainer
    end constructor

    constructor MenuItem(int x, int y, string font, string text, int selectedIndex, string navigateTo, string navigationArgs, 
                         MenuItemContainer parentContainer) : self(x, y, font, text, selectedIndex, navigateTo, parentContainer)

        self->outboundArgs := new object[] { (object) navigationArgs }

    end constructor

    -- Updates the controls state, based on the keys that have been pressed. 
    function void Update(Keys keyboardState, Mouse mouseState)

        if(keyboardState->KeyPressed(DIK_UP))
            parent->SelectPreviousControl()
        else if(keyboardState->KeyPressed(DIK_DOWN))
            parent->SelectNextControl()
        else if(keyboardState->KeyPressed(DIK_ENTER))
            if(navigateTo != NULL)
                if(navigateTo = "terminate")
                    Game::IsRunning := FALSE
                else if(navigateTo = "caller")
                    if(receivedArgs != NULL && receivedArgs[0] is type(String))
                        navigateTo := receivedArgs[0]
                    end if 
                end if
                --parentContainer->WeNeedToBoogy(navigateTo, navigationArgs)
                
                SceneManager::SetActiveScene(navigateTo, outboundArgs)
            end if
        end if

    end function

    -- Assigns the MenuItem to the specified container. When assigning a container,
    -- MenuItem adds itself to the containers control list.
    -- Exceptions:
    -- ArgumentNullException: attempting to assign a NULL value.
    --property MenuItemContainer ParentContainer

     --   accessors
     --       get
     --           return parentContainer
     --       set
     --           if(value = NULL)
     --               throw ArgumentNullException("Nope")
     --
     --           parentContainer := value
     --           parentContainer->Controls->Add(self)
     --   end accessors

    --end property

    -- stores the arguments passed by the scene when it was set as the active scene. 
    function ReceiveSceneArgs(object[] args)
        receivedArgs := args
    end function

    -- Blits the MenuItem to the backbuffer. 
    -- System::ArgumentNullException: the labels text evaluates to NULL.
    -- DirectDrawGenericException: a non-specific DirectDraw error has occured.
    -- DirectDrawInvalidClipListException: DirectDraw does not support the provided clip list.
    -- DirectDrawInvalidObjectException: DirectDraw received a pointer that was an invalid DirectDraw object.
    -- DirectDrawInvalidParametersException: one or more of the parameters passed to the method are incorrect.
    -- DirectDrawInvalidRectException: the provided rectangle was invalid.
    -- DirectDrawNoAlphaHardwareException: no alpha acceleration hardware is present or available, 
    --                                     causing the failure of the requested operation.
    -- DirectDrawNoBlitHardwareException: no blitter hardware is present.
    -- DirectDrawNoClipListException: no clip list is available.
    -- DirectDrawNoDDRaserOperationHardwareException: no DirectDraw raster operation (ROP) hardware is available.
    -- DirectDrawNoMirrorHardwareException: the operation cannot be carried out because no mirroring hardware is present or available.
    -- DirectDrawNoRasterOperationHardwareException: the operation cannot be carried out because no appropriate raster operation hardware is present or available.
    -- DirectDrawNoRotationHardwareException: the operation cannot be carried out because no rotation hardware is present or available.
    -- DirectDrawNoStretchHardwareException: the operation cannot be carried out because there is no hardware support for stretching.
    -- DirectDrawNoZBUfferHardwareException: the hardware doesn't have Z buffer support.
    -- DirectDrawSurfaceBusyException: the specified surface locked by another thread and access has been refused.
    -- DirectDrawSurfaceLostException: access to the surface is refused because the surface memory is gone.
    -- DirectDrawUnsupportedException: the operation isn't supported.
    -- DirectDrawWasStillDrawingException: the previous blit operation that is transferring information to or from this surface is incomplete.
    -- System::Runtime::InteropServices::COMException: An unspecified COM+ error occured.
    function Render()
        try
            self->label->Render()
        catch
            throw
        end try
    end function
end class