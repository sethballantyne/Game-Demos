class Input : static
Private
    LPDIRECTINPUT8 lpDI := NULL
    LPDIRECTINPUTDEVICE8 lpDIKeyboard := NULL
    LPDIRECTINPUTDEVICE8 lpDIMouse := NULL
    UCHAR previousKeyboardState[256]
    UCHAR currentKeyboardState[256]
    DIMOUSESTATE2 mouseState
    HKL keyboardLayout

    function InitKeyboard(HWND hWnd)

            if(lpDIKeyboard != NULL)
                lpDIKeyboard->Unacquire()
                lpDIKeyboard->Release()
                lpDIKeyboard := NULL
            end if

            SecureZeroMemory(&previousKeyboardState, 256);
            SecureZeroMemory(&currentKeyboardState, 256);

            VerifyNotNull(lpDI)
            result := lpDI->CreateDevice(GUID_SysKeyboard, &lpDIKeyboard, NULL)
            if(result != DI_OK)
                switch(result)
                    DIERR_DEVICENOTREG:
                        throw DirectInputDeviceNotRegisteredException("IDirectInput8::CreateDevice: the device or device instance is not registered with DirectInput.\n")

                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInput8::CreateDevice: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOINTERFACE:
                        throw DirectInputNoInterfaceException("IDirectInput8::CreateDevice: the object does not support the specified interface.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInput8::CreateDevice: this object has not been initialized.\n")

                    DIERR_OUTOFMEMORY:
                        throw System::OutOfMemoryException("IDirectInput8::CreateDevice: the DirectInput subsystem could not allocate sufficient memory to complete the call.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInput8::CreateDevice: an unspecified COM+ error occured.\n", result)
                end switch
            end if

            result := lpDIKeyboard->SetCooperativeLevel(hWnd, DISCL_BACKGROUND | DISCL_NONEXCLUSIVE)
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::SetCooperativeLevel: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::SetCooperativeLevel: this object has not been initialized.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::SetCooperativeLevel: an unspecified COM+ error occured.\n", result)

                end switch
            end if

            result := lpDIKeyboard->SetDataFormat(&c_dfDIKeyboard)
            if(result != DI_OK)
                switch(result)
                    DIERR_ACQUIRED: 
                        throw DirectInputAcquiredException("IDirectInputDevice8::SetDataFormat: the operation cannot be performed while the device is acquired.\n")

                    DIERR_INVALIDPARAM: 
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::SetDataFormat: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::SetDataFormat: this object has not been initialized.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::SetDataFormat: an unspecified COM+ error occured.\n", result)
                end switch
            end if

            result := lpDIKeyboard->Acquire()
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::Acquire: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::Acquire: this object has not been initialized.\n")

                    DIERR_OTHERAPPHASPRIO:
                        throw DirectInputOtherApplicationHasPriorityException("IDirectInputDevice8::Acquire: another application has a higher priority level, preventing this call from succeeding.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::Acquire failed", result)
                end switch
            end if

            -- user32.lib; windows.h
            self->keyboardLayout := GetKeyboardLayout(0)
    end function

    function InitMouse(HWND hWnd)

            if(lpDIMouse != NULL)
                lpDIMouse->Unacquire()
                lpDIMouse->Release()
                lpDIMouse := NULL
            end if

            VerifyNotNull(lpDI)
            result := lpDI->CreateDevice(GUID_SysMouse, &lpDIMouse, NULL)
            if(result != DI_OK)
                switch(result)
                    DIERR_DEVICENOTREG:
                        throw DirectInputDeviceNotRegisteredException("IDirectInput8::CreateDevice: the device or device instance is not registered with DirectInput.\n")

                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInput8::CreateDevice: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOINTERFACE:
                        throw DirectInputNoInterfaceException("IDirectInput8::CreateDevice: the object does not support the specified interface.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInput8::CreateDevice: this object has not been initialized.\n")

                    DIERR_OUTOFMEMORY:
                        throw System::OutOfMemoryException("IDirectInput8::CreateDevice: the DirectInput subsystem could not allocate sufficient memory to complete the call. ")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInput8::CreateDevice: ", result)
                end switch
            end if

            result := lpDIMouse->SetCooperativeLevel(hWnd, DISCL_BACKGROUND | DISCL_NONEXCLUSIVE)
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::SetCooperativeLevel: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::SetCooperativeLevel: this object has not been initialized.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::SetCooperativeLevel: ", result)

                end switch
            end if

            result := lpDIMouse->SetDataFormat(&c_dfDIMouse2)
            if(result != DI_OK)
                switch(result)
                    DIERR_ACQUIRED: 
                        throw DirectInputAcquiredException("IDirectInputDevice8::SetDataFormat: ")

                    DIERR_INVALIDPARAM: 
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::SetDataFormat: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::SetDataFormat: this object has not been initialized.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::SetDataFormat: ", result)
                end switch
            end if

            result := lpDIMouse->Acquire()
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::Acquire: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::Acquire: this object has not been initialized.\n")

                    DIERR_OTHERAPPHASPRIO:
                        throw DirectInputOtherApplicationHasPriorityException("IDirectInputDevice8::Acquire: another application has a higher priority level, preventing this call from succeeding.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::Acquire", result)
                end switch
            end if
    end function

    function ReleaseDevice(LPDIRECTINPUTDEVICE8 lpDevice) : inline
        if(lpDevice != NULL)
            lpDevice->Unacquire()
            lpDevice->Release()
            lpDevice := NULL
    end function
Public
    function Initialise(HINSTANCE hInstance, HWND hWnd)
            SecureZeroMemory(&currentKeyboardState[0], sizeof(currentKeyboardState))

            HRESULT result := DirectInput8Create(hInstance, DIRECT_INPUTVERSION, IID_IDirectInput8, (void **)&lpDI, NULL)
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("DirectInput8Create: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_OLDDIRECTINPUTVERSION:
                        throw DirectInputOldVersionException("DirectInput8Create: the application requires a newer version of DirectInput.\n")

                    DIERR_OUTOFMEMORY:
                        throw System::OutOfMemoryException("DirectInput8Create: the DirectInput subsystem could not allocate sufficient memory to complete the call.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("DirectInput8Create: ", result)
                end switch
            end if
                
            try
                InitKeyboard(hWnd)
                InitMouse(hWnd)
            catch
                Release()
                throw
            end catch

    end function

    function Keys* ReadKeyboard()

        VerifyNotNull(lpDIKeyboard)

        -- copy keys into previousKeyboardState
        memcpy_s(previousKeyboardState, 256, currentKeyboardState, 256);
        lpDIKeyboard->GetDeviceState(sizeof(currentKeyboardState), (LPVOID) currentKeyboardState)
        return new Keys(&currentkeyboardState[0], &previousKeyboardState[0])

    end function

    function Mouse* ReadMouse()
        
        VerifyNotNull(lpDIMouse)
        lpDIMoue->GetDeviceState(sizeof(mouseState), (LPVOID) mouseState)
        return new Mouse(&mouseState)

    end function

    function Release()

        ReleaseDevice(lpDIKeyboard)
        ReleaseDevice(lpDIMouse)
        
        if(lpDI != NULL)
            lpDI->Release()
            lpDI := NULL
        end if

    end function

    function Restore()

        HRESULT result

        if(lpDIKeyboard != NULL)
            result := lpDIKeyboard->Acquire()
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::Acquire: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::Acquire: this object has not been initialized.\n")

                    DIERR_OTHERAPPHASPRIO:
                        throw DirectInputOtherApplicationHasPriorityException("IDirectInputDevice8::Acquire: another application has a higher priority level, preventing this call from succeeding.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::Acquire", result)
                end switch
            end if
        end if

        if(lpDIMouse != NULL)
            result := lpDIMouse->Acquire()
            if(result != DI_OK)
                switch(result)
                    DIERR_INVALIDPARAM:
                        throw DirectInputInvalidParameterException("IDirectInputDevice8::Acquire: an invalid parameter was passed to the returning function, or the object was not in a state that permitted the function to be called.\n")

                    DIERR_NOTINITIALIZED:
                        throw DirectInputNotInitializedException("IDirectInputDevice8::Acquire: this object has not been initialized.\n")

                    DIERR_OTHERAPPHASPRIO:
                        throw DirectInputOtherApplicationHasPriorityException("IDirectInputDevice8::Acquire: Another application has a higher priority level, preventing this call from succeeding.\n")

                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectInputDevice8::Acquire", result)
                end switch
            end if
        end if
    end function

    function Shutdown()
        Release()
    end function

    function DIKToASCII(DWORD DirectInputScancode) : inline
        return MapVirtualKeyEx(DirectInputScancode, 1, self->keyboardLayout)
    end function
end class