-- a basic version of the Track Bar found in Windows. 
class Slider inherits CotainerControl
private
    -- the lower bound of currentValue.
    double minimumValue

    -- the upper bound of currentValue. 
    double maximumValue

    -- The amount that's added or subtracted from currentValue, based on whether the scroll box is 
    -- being moved to the left (decrease) or right (increase).
    double stepValue

    -- represents the current position of the scroll box on the track.
    -- This obviously will be <= maximumValue and >= minimumValue at any given time.
    double currentValue

    -- Height of the scroll box in pixels. NOT THE TRACK. The scroll box; that would be silly. 
    --
    -- A 12 pixel-high track. Geeeeeeeeeze.
    int scrollBoxHeight := 12

    -- the lines that make up the track that the track box moves along. 
    Line[2] trackLines

    -- the lines that make up the track box when rendered.
    Line[6] trackBoxLines

    -- Decreases the currentValue by the step amount specified at construction and updates 
    -- the value of the controls option key with the new value. 
    -- This also causes the controls track box to slide to the left if currentValue
    -- was greater than the controls minimum value before Decrement() was called; the change will be displayed
    -- the next time Slider::Render() is executed. 
    function Decrement()
        if(currentValue > minimumValue)
            currentValue -= stepValue
            if(currentValue < minimumValue)
                currentValue := minimumValue
            end if

            GameOptions::SetValue(self->optionsKey, self->currentValue)
        end if
    end function

    -- Increases the currentValue by the step amount specified at construction and updates 
    -- the value of the controls option key with the new value. 
    -- This also causes the controls track box to slide to the right if currentValue
    -- was less than the controls maximum value before Increment() was called; the change will be displayed
    -- the next time Slider::Render() is executed. 
    function Increment()
        if(currentValue < maximumValue)
            currentValue += stepValue
            if(currentValue > maximumValue)
                currentValue := maximumValue
            end if

            GameOptions::SetValue(self->optionsKey, self->currentValue)
        end if
    end function
public
    -- Initialises the slider control with the values read from the XML file.
    -- Arguments:
    -- x: the screen coordinate of the control on the x axis.
    -- y: the screen coordinate of the control on the y axis.
    -- width: the width (length) of the track in pixels.
    -- selectedIndex: the position of the control within its parent MenuItemContainer instance. 
    --                this specifies in which order the control is selected, not rendered or placed.
    -- minimum: the lower limit of the sliders range.
    -- maximum: the upper limit of the sliders range.
    -- step: the amount to add or subtract from the controls current value when the track box is moved.
    -- optionsKey: the key for the value in GameOptions that has to be updated whenever the track box is moved.
    -- parentContainer: the instance of MenuItemContainer the control belongs to.
    -- Exceptions:
    -- System::ArgumentNullException: optionsKey is NULL.
    -- System:ArgumentException: optionsKey evaluates to String::Empty, or
    --                           the value of minimum is greater than maximum, or
    --                           the value of step is greater than maximum, or
    --                           minimum, maximum or step are greater than Int32::MaxValue, or
    --                           minimum, maximum, or step are less than Int32::MinValue.
    constructor(int x, int y, uint width, int selectedIndex, double minimum, double maximum, double step, string optionsKey,
                MenuItemContainer parentContainer) : ContainerControl(x, y, parentContainer, selectedIndex)
         
        if(optionsKey = NULL)
            throw ArgumentNullException("optionsKey")
        else if(opitionsKey = String::Empty)
            throw ArgumentException("optionsKey")
        end if

        if(minimum >= maximum)
            throw ArgumentException("minimum is greater than or equal to maximum")
        else if(step > maximum)
            throw ArgumentException("step is greater than maximum")
        else if(minimum > Int32::MaxValue)
            throw ArgumentException("minimum is greater than Int32::MaxValue")
        else if(minimum < Int32::MinValue)
            throw ArgumentException(minimum is less than Int32::MinValue")
        else if(maximum > Int32::MaxValue)
            throw ArgumentException("maximum is greater than Int32::MaxValue")
        else if(maximum < Int32::MinValue)
            throw ArgumentException("maximum is less than Int32::MinValue")
        else if(step > Int32::MaxValue)
            throw ArgumentException("step is greater than Int32::MaxValue")
        else if(step < Int32::MinValue)
            throw ArgumentException("step is less than Int32::MinValue")
        end if

        minimumValue := minimum
        maximumValue := maximum
        stepValue := step

        -- track
        trackLines[0] := new Line(Color::White, new Point(x, y), new Point(x + width, y))
        trackLines[1] := new Line(Color::FromArgb(0, 127, 127, 127), new Point(x, y), new Point(x + width, y))

        -- x is a placeholder, it'll be updated to the correct value when the slider is rendered.
        for(i := 0; i < sliderLines->Count; i++)
            sliderLines[i] := new Line(Colour::White, new Point(x, y - (sliderHeight / 2)), new Point(x, y + (sliderHeight / 2))
        end for
        
        -- slider shadow
        sliderLines[sliderLines->Count - 1]->Colour := Color::FromArgb(0, 83, 83, 83)
    end constructor
    
    -- Called when the controls parent Scene has been activated by the scene manager.
    -- The slider control doesn't have any arguments to receive but since it's called only
    -- when the scene has been activated, it's a good place to update the control during 
    -- runtime so it's displaying the correct information when it's displayed. 
    function ReceiveSceneArgs(object[] sceneArgs)
        static bool firstRun := true
        try
            if(firstRun)
                self->currentValue := GameOptions::GetValue(self->optionsKey, self->minimumValue)
                firstRun := false
            end if
        catch
        end try
    end function
    
    -- Draws the control to the backbuffer.
    function Render()
        Video::DrawLines(trackLines)

        double progress = currentValue / maximumvalue
        -- subtracting 3 because the slider is 6 pixels wide and currentValue is the middle of the slider.
        int pixelOffset = (int)Math::Truncate(progress * self->trackWidth) - (sliderLines->Count / 2)

        -- slider
        -- pixelOffset -= 3; 
        --for(int i := pixelOffset - 3 to pixelOffset + 2)
        --    Video::DrawLine(Color::White, self->Position->X + i, self->sliderYStartPosition, 
        --                    self->Position->X + i, self->sliderYFinishPosition)
        --end for
        --pixelOffset -= 3;
     
        for(i := 0; i < sliderLines->Count - 1; i++)
            sliderLines[i]->From->X := self->Position->X + pixelOffset
            sliderLines[i]->To->X := sliderLines[i]->From->X

            pixelOffset++
        end for

        -- slider shadow
        sliderLines[sliderLines->Count - 1]->From->X := self->Position->X + (sliderLines->Count / 2)
        sliderLines[sliderLines->Count - 1]->To->X := sliderLines[sliderLines->Count - 1]->From->X
        
        Video::DrawLines(sliderLines)
    end function

    -- Polls the keyboard, moving the track box to the left or right if the relevant key is pressed. 
    -- Exceptions:
    -- ArgumentNullException: keyboardState is NULL.
    -- Remarks:
    -- Apart from GameView, the mouse isn't used by controls hence why it's not checked for a null value.
    function Update(Keys keyboardState, Mouse mouseState)
        if(keyboardState = NULL)
            throw ArgumentNullException("keyboardState")
        end if

        if(keyboardState->KeyDown(DIK_LEFT))
            self->Decrement()
        else if(keyboardState->KeyDown(DIK_RIGHT))
            self->Increment()
        end if
    end function

end class