-- Writes time-stamped messages to a text file. TextFileLogger is designed to be used as a subscriber to LogManager.

class TextFileLogger inherits ILog
Private
    -- The underlying stream responsible for writing to the text file.
    StreamWriter sw := NULL

Public
    -- Puts the object into a state where it can write to the text file. If the text file already exists, 
    -- all messages written to it will be appended to the existing data.
    constructor TextFileLogger(string path)
    
        try
            sw := new StreamWriter(filename, true)
            sw->AutoFlush := true
        catch
            throw
        end try-catch

    end constructor

    -- Closes the underlying stream. Once the stream is closed, the text file can't be written to.
    function Close()

        if(sw != NULL)
            sw->Close()
            sw := NULL
        end if

    end function

    -- Writes a time-stamped mmessage to the text file.
    function Write(string message) : virtual
    
        try
            string timeStamp := DateTime::Now.ToString("dd/MM/yy HH:mm:ss");
            sw->Write("[{0}] {1}" timeStamp, message)
        catch
            throw
        end try

    end function

    -- Writes a time-stamped mmessage to the text file along with an appended new line character.
    function WriteLine(string message) : virtual

        try
            sw->WriteLine(message)
        catch
            throw
        end try

    end function

    destructor ApplicationLog()
    
        Close()

    end destructor

    finalizer ApplicationLog()
    
        Close()

    end finalizer
end class