class Game : static
Private
    bool isWindowActive := false

    MessageBoxLogger messageBoxOutput := NULL
    TextFileLogger textFileOutput := NULL
    $ifdef DEBUG
    new VSOutputLogger vsOutput 
    $endif

Public
    function Initialise(HINSTANCE hInstance, HWND hWnd)
        try
            new messageBoxOutput(hWnd)
            new textFileOutput("log.txt")

            $ifdef DEBUG
            LogManager::Add(LogType->Error | LogType->Debug, vsOutput)
            $endif
            LogManager::Add(LogType->Error | LogType->Debug | LogType->Log, textFileOutput)
            LogManager::Add(LogType->Error, messageBoxOutput)

            LogManager::WriteMessage(LogType->Log, "Initialising Video\n")
            Video::Initialise()

            LogManager::WriteMessage(LogType->Log, "Initialising Audio\n")
            Audio::Initialise()

            LogManager::WriteMessage(LogType->Log, "Initialising Input\n")
            Input::Initialise(hInstance, hWnd)

            LogManager::WriteMessage(LogType->Log, "Initialising the resource manager\n")
            ResourceManager::Intialise("paths.xml")

            LogManager::WriteMessage(LogType->Log, "Reading options.xml")
            GameOptions::Open("options.xml")
            int windowWidth := GameOptions::GetValue("windowWidth", 1024)
            int windowHeight := GameOptions::GetValue("windowHeight", 768)
            int bpp := GameOptions::GetValue("bitsPerPixel", 32)

            LogManager::WriteMessage(LogType->Log, 
            "Setting display mode to {0}x{1}@{2}bpp\n", windowWidth, windowHeight, bpp)
            Video::SetDisplayMode(windowWidth, windowHeight, bpp)

            LogManager::WriteMessage(LogType->Log, "Loading bitmaps\n")
            ResourceManager::LoadBitmaps()
            
            LogManager::WriteMessage(LogType->Log, "Loading sound effects\n")
            ResourceManager::LoadSounds()

	       LogManager::WriteMessage(LogType->Log, "Generating fonts\n")
            ResourceManager::CreateFonts()

            LogManager::WriteMessage(LogType->Log, "Parsing entities.xml\n")
            TheCloneABrick5000TM::LoadEntities(ResourceManager::GetXML("entities"))


        catch
        
    end function

    function Shutdown()
        

        LogManager::Remove(LogType->Error | LogType->Debug | LogType->Log, textFileOutput)
        textFileOutput->Close()
    end function

    property bool IsWindowActive
        get
            return isWindowActive
        end get

        set
            isActiveWindow := value
        end set
    end property
end class