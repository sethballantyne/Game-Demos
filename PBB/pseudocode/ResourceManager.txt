-- The resource manager creates, manages and destroys all the games assets. 
-- All objects created by the resource manager must be destroyed by the resource manager. 
-- When you request a resource via the 3 Get* methods, you're not getting a copy of a resource but 
-- rather the address of the resource stored in the pool, thus multiple requests for the same resource
-- by multiple objects get the same address to the same resource. DO NOT FREE THE RESOURCE UNTIL 
-- IT'S TIME TO TERMINATE. Doing so makes the resource unavailable to any other object that needs it. 
class ResourceManager : static 
Private
    new Dictionary<string, Font> fonts
    new Dictionary<string, SoundBuffer> sounds
    new Dictionary<string, Surface> surfaces
    new Dictionary<string, XDocument> xmlFiles

    new List<string> bitmapPaths
    new List<string> xmlPaths
    new List<string> audioPaths

    string workingDirectory := NULL

    -- Returns the value of the specified attribute within the specified element as a string.
    -- Exceptions:
    -- System::Xml::XmlException: the specified attribute isn't present within the element,
    --                            or the attributes value equates to String::Empty.
    function String GetAttributeValue(XElement element, string attribute)
        XAttribute xAttribute := element->Attribute(attribute)
        if(xAttribute = NULL)
            throw new System::Xml::XmlException("the {0} attribute is missing.", attribute)
        end if

        if(xAttribute->Value = String.Empty)
            throw new System::Xml::XmlException("the {0} attribute contains an empty string value.", attribute)
        end if

        return attribute->Value
    end function

    function bool GetAttributeValueAsBoolean(XElement element, string attribute)

        XAttribute xAttribute := element->Attribute(attribute)
        if(xAttribute = NULL)
            throw new System::Xml::XmlException("the {0} attribute is missing.", attribute)
        end if

        if(xAttribute->Value = String.Empty)
            throw new System::Xml::XmlException("the {0} attribute contains an empty string value.", attribute)
        end if

        try
            return Convert.ToBoolean(xAttribute->Value)
        catch
            throw
        end try

    end function

    function ParsePaths(XElement resourceElement, List<string> pathList)

        if(resourceElement = NULL)
            throw System::ArgumentNullException("resourceElement")
        else if(pathList = NULL)
            throw System::ArgumentNullException("pathList")
        end if


        IEnumerable<XElement> pathsQuery := resourceElement->Descendants("path")
                
            foreach(pathElement in pathsQuery)
                if(pathElement != NULL)
                    bool includeSubDirs := GetAttributeValueAsBoolean(pathElement, "includeSubDirectories")
                    string path := pathElement->Value
                        if(path = String::IsNullOrWhiteSpace)
                            path := "//"
                        end if

                        -- not handling the event that path equates to String::Empty because it's
                        -- effectively the same as specifying the directory seperator.

                        if(System::IO::Directory::Exists(workingPath + path))
                            for(i := 0 to pathList.Count - 1)
                                if(pathList[i]->Path == path)
                                    return
                                end if
                            end for
                        
                            pathList->Add(new ResourcePath(path, includeSubDirs))
                        else 
                            throw System::IO::DirectoryNotFoundException(path)
                        end if
                    end if
                end if
            end foreach

    end function

Public
    -- Initialises the resorce manager with the paths in the specified XML file. 
    function Initialise(string pathsFile)
        
        workingDirectory := Directory::GetCurrentDirectory()
        XDocument pathsFile := XDocument::Load(pathsFile)

        IEnumerable<XElement> resourcesQuery := pathsFile->Root->GetDescendants("resource")

        
        foreach(resourceElement in resourcesQuery)

            string type := GetAttributeValue(resourceElement, "type")
            if(type == "bitmaps")
                ParsePaths(resourceElement, bitmapPaths)
            else if(type == "audio")
                ParsePaths(resourceElement, audioPaths)
            else if(type == "xml")
                ParsePaths(resourceElement, xmlPaths)
            else 
                throw new System::Xml::XmlException("invalid resource attribute {0}\n", type)
            end if

        end foreach
    end function

    function Font GetFont(string fontName)
        try
            return font[fontName]
        catch(KeyValuePairException)
            throw ResourceNotFoundException("Font resource {0} doesn't exist.\n", surfaceName)
        catch
            throw
        end try
    end function

    function SoundBuffer GetSoundBuffer(string soundName)
        try
            return sounds[soundName]
        catch(KeyValuePairException)
            throw ResourceNotFoundException("Sound resource {0} doesn't exist.\n", surfaceName)
        catch
            throw
        end try
    end function

    function Surface GetSurface(string surfaceName)
        try
            return surfaces[surfaceName]
        catch(KeyValuePairException)
            throw ResourceNotFoundException("Surface resource {0} doesn't exist.\n", surfaceName)
        catch
            throw
        end try
    end function

    function GetXML(string documentName)
        try
            return xmlFiles[documentName]
        catch(KeyValuePairException)
            throw ResourceNotFoundException("XML resource {0} doesn't exist.\n", documentName)
        catch
            throw
        end try
    end function

    function LoadFonts(string file)
        try
            XDocument fontFile := GetXML(font)
            Font[] fonts := FontFactory::CreateFonts(fontFile)
            self->fonts->AddRange(fonts)
        catch
            throw
        end try
       
    end function

    function LoadSoundBuffers()
        foreach(path in audioPaths)

            string[] files := NULL

            if(path->IncludeSubDirectories)
                files := System::IO::Directory::GetFiles(path->Path, "*.wav", SearchOption::AllDirectories)
            else 
                files := System::IO::Directory::GetFiles(path->Path, "*.wav", SearchOption::TopDirectoryOnly)
            end if

            foreach(file in files)
                SoundBuffer soundBuffer := Audio::CreateSoundBuffer(file)
                string resourceName := System::IO::File::GetFileNameWithoutExtension(file->Path)

                surfaces->Add(resourceName, soundBuffer)
            end foreach
        end foreach
    end function

    function LoadSurfaces()
      foreach(path in bitmapPaths)

        string[] files := NULL

        if(path->IncludeSubDirectories)
            files := System::IO::Directory::GetFiles(path->Path, "*.bmp", SearchOption::AllDirectories)
        else 
            files := System::IO::Directory::GetFiles(path->Path, "*.bmp", SearchOption::TopDirectoryOnly)
        end if

        foreach(file in files)
            Surface surface := Video::CreateSurface(file)
            string resourceName := System::IO::File::GetFileNameWithoutExtension(file->Path)

            surfaces->Add(resourceName, surface)
        end foreach
      end foreach
    end function

    function LoadXML()

        try
            foreach(path in XmlPaths)
                String[] files := NULL

                if(path->IncludeSubDirectories)
                    files := System::IO::Directory::GetFiles(path->Path, "*.xml", SearchOption::AllDirectories)
                else 
                    files := System::IO::Directory::GetFiles(path->Path, "*.xml", SearchOption::TopDirectoryOnly)
                end if

                foreach(file in files)
                    XDocument xmlDocument := XDocument::Load(file->Path)
                    string resourceName := System::IO::File::GetFileNameWithoutExtension(file->Path)

                    xmlFiles->Add(resourceName, xmlDocument)
                end foreach
            foreach
        catch
            throw
        end try
        
    end funtion

    function LoadResources()
        try
            self->LoadXML()
            self->LoadSurfaces()
            self->LoadSoundBuffers()
            self->LoadFonts("fonts")
        catch
            throw
        end try
    end function
    -- Releases all the Surfaces and SoundObjects contained within the resource manager. 
    -- Once released, these objects have to be reloaded before they can be used again.
    function Release()
    end function

    -- Calls Restore() on each DirectX object stored within the resource manager. This should only be used
    -- when DirectDrawSurfaceLostException or DirectSoundBufferLostException are encountered.
    function Restore()
    end function

    -- Frees the memory used by all the resources contained within the resource manager. Unlike Release(), this
    -- frees all resources, not just the DirectX objects. 
    function Shutdown()
    end function
end class
