-- Controls all the scenes within the game and acts as an intermediary between each scene and all the other subsystems within the game.

class SceneManager : static
    -- All the scenes read from the XML file, the key being the scenes name as read from scenes id attribute. 
    new Dictionary<string, Scene> scenes

    -- the scene that's currently being displayed the user. 
    Scene currentScene := NULL
public
    -- Builds an internal collection of Scenes based on the contents of the XML file and sets the 
    -- specified scene as the initial scene that's displayed when the game first starts. If an initial
    -- scene isn't specified in the XML file, it selects the first scene parsed from XML file. If no
    -- scenes are read from the XML file, a NoScenesAvailableException is thrown.
    -- Exceptions:
    -- System::ArgumentNullException: sceneDocument is null
    -- NoScenesAvailableException: No scenes have been read from the XML file.
    function Initialise(XDocument sceneDocument)

        if(sceneDocument = NULL)
            throw ArgumentNullException("sceneDocument")
        end if

        new SceneFactory sceneFactory
        try
            Scene[] scenes := sceneFactory.Read(sceneDocument)
            if(scenes->Count == 0)
                throw new NoScenesAvailableException("No scenes have been read from the XML file. Screw you guys, I'm going home.")
            end if

            for(i = 0 to scenes->Count)
                scenes.Add(scenes[i]->Name, scenes[i])

                if(scene[i]->IsInitialScene)
                    currentScene := scene[i]
                end if
            end for

            if(currentScene = NULL)
                -- XML file doesn't specify an initial scene, grab the first one in the array.
                currentScene := scenes[0]
            end if
        catch
            throw
        end try

    end function

    -- Specifies which scene to display to the user, along with optional arguments which can be
    -- consumed by its child controls.
    -- Arguments:
    -- scene: the scene to be presented to the user.
    -- sceneArgs: the optional arguments that will be passed to the scene specified in navigateTo.
    -- Exceptions:
    -- ArgumentNullException: scene is NULL
    -- ArgumentException: scene evaluates to String::Empty. 
    function SetActiveScene(string scene, object[] sceneArgs)

        if(navigateTo = NULL)
            throw new ArgumentNullException("scene")
        else if(scene = String::Empty)
            throw new ArgumentException("scene")
        end if

        try
            currentScene := scenes[scene]
            currentScene->BroadcastArguments(sceneArgs)
        catch
            throw
        end try

    end function
end class