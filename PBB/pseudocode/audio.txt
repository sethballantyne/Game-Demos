-- Wrapper around the IDirectSound8 COM+ interface. Audio handles the initialisation and shutdown of DirectSound, 
-- along with creating SoundBuffers based on WAV files read from disk. 

class Audio : static
Private
    LPDIRECTSOUND8 lpDS := NULL

    function LPDIRECTSOUNDBUFFER8 CreateDirectSoundBuffer(bufferSize : uint) : static
        
        WAVEFORMATEX waveFormat
        DSBUFFERDESC dsBD

        SecureZeroMemory(&waveFormat, sizeof(waveFormat))
        -- TODO: add accessors and private variables so the magic numbers aren't needed.
        waveFormat.wFormatTag := WAVE_FORMAT_PCM
        waveFormat.nChannels := 1 -- mono
        waveFormat.nSamplesPerSec := 11025
        waveFormat.nBlockAlign := 1
        waveFormat.nAvgBytesPerSec := pcmwf.nSamplesPerSec * pcmwf.nBlockAlign
        waveFormat.wBitsPerSample := 8
        waveFormat.cbSize := 0              -- always set to zero

        SecureZeroMemory(&dsBD, sizeof(dsBD))
        dsBD.dwSize := sizeof(dsBD)
        dsBD.dwFlags := DSBCAPS_CTRLVOLUME | DSBCAPS_STATIC | DSBCAPS_LOCSOFTWARE
        dsBD.dwBufferBytes := bufferSize
        dsBD.lpwfxFormat := &waveFormat

        LPDIRECTSOUNDBUFFER lpDSTempBuffer := NULL
        LPDIRECTSOUNDBUFFER lpDSSoundBuffer8 := NULL

        VerifyNotNull(lpDS)
        HRESULT result := lpDS->CreateSoundBuffer(&dsBD, &lpDSTempBuffer, NULL)
        if(result != DS_OK)
            switch(result)
                DSERR_ALLOCATED:
                    throw DirectSoundAllocatedException("CreateSoundBuffer: the request failed because resources, such as a priority level, were already in use by another caller.")

                DSERR_BADFORMAT:
                    throw DirectSoundBadFormatException("CreateSoundBuffer: the specified wave format is not supported.")

                DSERR_BUFFERTOOSMALL:
                    throw DirectSoundBufferTooSmallException("CreateSoundBuffer: the buffer size is not great enough to enable effects processing.")

                DSERR_CONTROLUNAVAIL:
                    throw DirectSoundControlUnavailableException("CreateSoundBuffer: the buffer control requested by the caller is not available.")

                DSERR_DS8_REQUIRED:
                    throw DirectSoundVersion8RequiredException("CreateSoundBuffer: a DirectSound object of class CLSID_DirectSound8 or later is required for the requested functionality. ")

                DSERR_INVALIDCALL:
                    throw DirectSoundInvalidCallException("CreateSoundBuffer: This function is not valid for the current state of this object.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("CreateSoundBuffer: an invalid parameter was passed to the returning function.")

                DSERR_NOAGGREGATION:
                    throw DirectSoundNoAggregationException("CreateSoundBuffer: the object does not support aggregation.")

                DSERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("CreateSoundBuffer: the DirectSound subsystem could not allocate sufficient memory to complete the caller's request.")

                DSERR_UNINITIALIZED:
                    throw DirectSoundUninitializedException("CreateSoundBuffer: the IDirectSound8::Initialize method has not been called or has not been called successfully before other methods were called.")

                DSERR_UNSUPPORTED:
                    throw DirectSoundUnsupportedException("CreateSoundBuffer: the function called is not supported.")
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectSound8::CreateSoundBuffer failed.\n")
            end switch
        end if

        result := lpDSTempBuffer->QueryInterface(IID_IDirectSoundBuffer8, (LPVOID *) &lpDSSoundBuffer8)
        if(result != S_OK) -- S_OK, not DS_OK. 
            lpDSTempBuffer->Release()
            throw System::Runtime::InteropServices::COMException("lpDSTempBuffer->QueryInterface failed.", result)
        end if

        return lpDSSoundBuffer8

    end function
Public
     -- Loads the specified WAV file from disk and returns it as a SoundBuffer object. 
     -- CreateSoundBuffer currently only supports the DirectSound default of mono,  8bit 11KHz playback.
    function SoundBuffer CreateSoundBuffer(string filename)

        HMMIO hWav  -- handle to the wave file
        MMCKINFO parentChunk
        MMCKINFO childChunk

        WAVEFORMATEX waveFormat

        UCHAR *soundBuffer
        UCHAR *audioPtr1 := NULL
        UCHAR *audioPtr2 := NULL

        DWORD audioLength1 := 0
        DWORD audioLength2 := 0


        parentChunk.ckid := (FOURCC)0
        parentChunk.cksize := 0
        parentChunk.fccType := (FOURCC)0
        parentChunk.dwDataOffset := 0
        parentChunk.dwFlags := 0

        childChunk := parentChunk

        -- You'll need to do string conversion here obviously, since you're using 
        -- a managed string as the functions argurment.

        hWav := mmioOpen(filename, NULL, MMIO_READ | MMIO_ALLOCBUF)
        if (!hWav)  
            -- not using FileNotFoundException because it may have failed because of another 
            -- reason, such as permissions. 
            throw System::IO::IOException("Failed to open " + filename)
        end if

        parentChunk.fccType := mmioFOURCC('W', 'A', 'V', 'E') -- mmioFOURCC is a macro
        MMRESULT mmIOResult := mmioDescend(hWav, &parentChunk, NULL, MMIO_FINDRIFF)
        if(mmIOResult != MMSYSERR_NOERROR) -- returns MMIOERR_CHUNKNOTFOUND on error
        end if
            mmioClose(hWav, 0)
            
            throw System::IO::IOException(filename + " is either corrupt or isn't a valid WAV file.")
        end if

        childChunk.ckid := mmioFOURCC('f', 'm', 't', ' ') 
        mmIOResult := mmioDescend(hWav, &childChunk, &parentChunk, 0))
        if(mmIOResult != MMSYSERR_NOERROR)
            mmioClose(hWav, 0)

           throw System::IO::IOException(filename + " is either corrupt or isn't a valid WAV file.")
        end if

        -- read the wave format information
        LONG bytesRead := mmioRead(hWav, (char *)&waveFormat, sizeof(waveFormat))
        if(bytesRead != sizeof(waveFormat))
            mmioClose(hWav, 0)

            if(bytesRead = 0) -- reached the end of the file while reading.
                throw System::IO::EndOfStreamException("mmioRead: reached the end of " + filename + " while attempting to read in the format data.")
            else              -- -1 returned; error reading from the file. 
                throw System::IO::IOException("mmioRead: failed to read from " + filename)
            end if
        end if

        if (waveFormat.wFormatTag != WAVE_FORMAT_PCM)
        
            mmioClose(hWav, 0);

            System::IO::FileFormatException(filename + " is not a valid WAV file.")
        end if

        mmioResult := mmioAscend(hWav, &childChunk, 0)
        if(mmioResult != MMSYSERR_NOERROR)
            mmioClose(hWav, 0)

            -- MMIOERR_CANNOTSEEK returned. mmioAscend also returns MMIOERR_CANNOTWRITE but
            -- it's not handled here because it's not relevant; we're not writing to the file.
            System::IO::IOException("mmioAscend: failed to seek while processing " + filename)
        end if

        childChunk.ckid := mmioFOURCC('d', 'a', 't', 'a')
        mmioResult := mmioDescend(hWav, &childChunk, &parentChunk, MMIO_FINDCHUNK)
        if(mmioResult != MMSYSERR_NOERROR)
            mmioClose(hWav, 0)

            throw System::IO::IOException("mmioDescend: the end of the file or parent chunk was reached before the desired chunk was found.")
        end if

        -- TODO: check for failure
        soundBuffer := (UCHAR *)malloc(childChunk.cksize)
        if(soundBuffer = NULL)
            mmioClose(hWav, 0)
            throw System::OutOfMemoryException("Not enough memory available to load the WAV file.")
        end if

        mmioRead(hWav, (char*)soundBuffer, childChunk.cksize)
        if(bytesRead != childChunk.cksize)
            mmioClose(hWav, 0)

            if(bytesRead = 0) -- reached the end of the file while reading.
                -- TODO: considering changing this to IOException as well just to simplify it.
                throw System::IO::EndOfStreamException("mmioRead: reached the end of " + filename + " while attempting to read in the format data.")
            else              -- -1 returned; error reading from the file. 
                throw System::IO::IOException("mmioRead: failed to read from " + filename)
            end if
        end if

        mmioClose(hWav, 0)

        LPDIRECTSOUNDBUFFER8 lpDSBuffer := NULL
        try
            lpDSBuffer := Audio::CreateDirectSoundBuffer(childChunk.cksize) 
        catch
            free(soundBuffer)
            throw
        end try-catch

        HRESULT result := lpDSBuffer->Lock(
            0,
            childChunk.cksize, 
            (void **)&audioPtr1, 
            &audioLength1, 
            (void **)&audioPtr2, 
            &audioLength2, 
            DSBLOCK_FROMWRITECURSOR
         )

         if(result != DS_OK)
            free(soundBuffer)
            switch(result)
                DSERR_BUFFERLOST:
                    throw DirectSoundBufferLostException("IDirectSoundBuffer8::Lock: ")

                DSERR_INVALIDCALL:
                    throw DirectSoundInvalidCallException("IDirectSoundBuffer8::Lock: ")

                DSERR_INVALIDPARAM:
                    throw  DirectSoundInvalidParameterException("IDirectSoundBuffer8::Lock: ")

                DSERR_PRIOLEVELNEEDED:
                    throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::Lock: ")

                default:
                    throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::Lock failed.", result)
            end switch
         end if

         -- TODO: change these to secure versions
         memcpy(audioPtr1, soundBuffer, audioLength1)
         memcpy(audioPtr2, (soundBuffer + audioLength1), audioLength2)

         result := lpDSBuffer->Unlock(audioPtr1, audioLength1, audioPtr2, audioLength2)
         if(result != DS_OK)
            free(soundBuffer)
            switch(result)
                DSERR_INVALIDCALL:
                    throw DirectSoundInvalidCallException("IDirectSoundBuffer8::Unlock: ")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::Unlock: ")

                DSERR_PRIORITYLEVELNEEDED:
                    throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::Unlock: ")

                 default:
                    throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer::Unlock failed.", result)
            end switch
         end if

         free(soundBuffer)

         return new SoundBuffer(lpDSBuffer)
    end function
    
    -- Initialises DirectSound. This method must be called before any SoundBuffer objects are created and played.
    function Initialise(HWND hWnd) : static 
        
        HRESULT result := DirectSoundCreate8(NULL, &lpDS, NULL)
        if(result != DS_OK)
            switch(result)
                DSERR_ALLOCATED:
                    throw DirectSoundAllocatedException("DirectSoundCreate8: the request failed because resources, such as a priority level, were already in use by another caller.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("DirectSoundCreate8: an invalid parameter was passed to the returning function.")

                DSERR_NOAGGREGATION:
                    throw DirectSoundNoAggregationException("DirectSoundCreate8: the object does not support aggregation.")

                DSERR_NODRIVER:
                    throw DirectSoundNoDriverException("DirectSoundCreate8: no sound driver is available for use, or the given GUID is not a valid DirectSound device ID.")

                DSERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("DirectSoundCreate8: the DirectSound subsystem could not allocate sufficient memory to complete the caller's request. ")

                default:
                    throw System::Runtime::InteropServices::COMException("DirectSoundCreate8 failed.\n", result)
            end switch
        end if

        result := lpDS->SetCooperativeLevel(hWnd, DSSCL_NORMAL)
        if(result != DS_OK)
            switch(result)
                DSERR_ALLOCATED:
                    throw DirectSoundAllocatedException("SetCooperativeLevel: the request failed because resources, such as a priority level, were already in use by another caller.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("SetCooperativeLevel: an invalid parameter was passed to the returning function.")

                DSERR_UNINITIALIZED:
                    throw DirectSoundUninitializedException("SetCooperativeLevel: the IDirectSound8::Initialize method has not been called or has not been called successfully before other methods were called.")

                DSERR_UNSUPPORTED:
                    throw DirectSoundUnsupportedException("SetCooperativeLevel: the function called is not supported.")

                default:
                    System::Runtime::InteropServices::COMException("IDirectSound8::SetCooperativeLevel failed.", result)
            end switch
        end if

    end function

    -- Shutsdown DirectSound. Once Shutdown is called, the audio system must be reinitialised before sound can be played.
    function Shutdown() : static

        if(lpDS != NULL)
            lpDS->Release()
            lpDS := NULL
        end if

    end function
end class