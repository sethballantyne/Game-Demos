class Audio : static
Private
    LPDIRECTSOUND8 lpDS := NULL
Public
    function LPDIRECTSOUNDBUFFER8 CreateSoundBuffer(bufferSize : uint) : static
        
        WAVEFORMATEX waveFormat
        DSBUFFERDESC dsBD

        SecureZeroMemory(&waveFormat, sizeof(waveFormat))
        -- TODO: add accessors and private variables so the magic numbers aren't needed.
        waveFormat.wFormatTag := WAVE_FORMAT_PCM
        waveFormat.nChannels := 1 -- mono
        waveFormat.nSamplesPerSec := 11025
        waveFormat.nBlockAlign := 1
        waveFormat.nAvgBytesPerSec := pcmwf.nSamplesPerSec * pcmwf.nBlockAlign
        waveFormat.wBitsPerSample := 8
        waveFormat.cbSize := 0              -- always set to zero

        SecureZeroMemory(&dsBD, sizeof(dsBD))
        dsBD.dwSize := sizeof(dsBD)
        dsBD.dwFlags := DSBCAPS_CTRLVOLUME | DSBCAPS_STATIC | DSBCAPS_LOCSOFTWARE
        dsBD.dwBufferBytes := bufferSize
        dsBD.lpwfxFormat := &waveFormat

        LPDIRECTSOUNDBUFFER lpDSTempBuffer := NULL
        LPDIRECTSOUNDBUFFER lpDSSoundBuffer8 := NULL

        HRESULT result := lpDS->CreateSoundBuffer(&dsBD, &lpDSTempBuffer, NULL)
        if(result != DS_OK)
            switch(result)
                DSERR_ALLOCATED:
                    throw DirectSoundAllocatedException("CreateSoundBuffer: the request failed because resources, such as a priority level, were already in use by another caller.")

                DSERR_BADFORMAT:
                    throw DirectSoundBadFormatException("CreateSoundBuffer: the specified wave format is not supported.")

                DSERR_BUFFERTOOSMALL:
                    throw DirectSoundBufferTooSmallException("CreateSoundBuffer: the buffer size is not great enough to enable effects processing.")

                DSERR_CONTROLUNAVAIL:
                    throw DirectSoundControlUnavailableException("CreateSoundBuffer: the buffer control requested by the caller is not available.")

                DSERR_DS8_REQUIRED:
                    throw DirectSoundVersion8RequiredException("CreateSoundBuffer: a DirectSound object of class CLSID_DirectSound8 or later is required for the requested functionality. ")

                DSERR_INVALIDCALL:
                    throw DirectSoundInvalidCallException("CreateSoundBuffer: This function is not valid for the current state of this object.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("CreateSoundBuffer: an invalid parameter was passed to the returning function.")

                DSERR_NOAGGREGATION:
                    throw DirectSoundNoAggregationException("CreateSoundBuffer: the object does not support aggregation.")

                DSERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("CreateSoundBuffer: the DirectSound subsystem could not allocate sufficient memory to complete the caller's request.")

                DSERR_UNINITIALIZED:
                    throw DirectSoundUninitializedException("CreateSoundBuffer: the IDirectSound8::Initialize method has not been called or has not been called successfully before other methods were called.")

                DSERR_UNSUPPORTED:
                    throw DirectSoundUnsupportedException("CreateSoundBuffer: the function called is not supported.")
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectSound8::CreateSoundBuffer failed.\n")
            end switch
        end if

        result := lpDSTempBuffer->QueryInterface(IID_IDirectSoundBuffer8, (LPVOID *) &lpDSSoundBuffer8)
        if(result != S_OK) -- S_OK, not DS_OK. 
            lpDSTempBuffer->Release()
            throw System::Runtime::InteropServices::COMException("lpDSTempBuffer->QueryInterface failed.", result)
        end if

        return lpDSSoundBuffer8

    end function

    function Initialise(HWND hWnd) : static 
        
        HRESULT result := DirectSoundCreate8(NULL, &lpDS, NULL)
        if(result != DS_OK)
            switch(result)
                DSERR_ALLOCATED:
                    throw DirectSoundAllocatedException("DirectSoundCreate8: the request failed because resources, such as a priority level, were already in use by another caller.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("DirectSoundCreate8: an invalid parameter was passed to the returning function.")

                DSERR_NOAGGREGATION:
                    throw DirectSoundNoAggregationException("DirectSoundCreate8: the object does not support aggregation.")

                DSERR_NODRIVER:
                    throw DirectSoundNoDriverException("DirectSoundCreate8: no sound driver is available for use, or the given GUID is not a valid DirectSound device ID.")

                DSERR_OUTOFMEMORY:
                    throw System::OutOfMemoryException("DirectSoundCreate8: the DirectSound subsystem could not allocate sufficient memory to complete the caller's request. ")

                default:
                    throw System::Runtime::InteropServices::COMException("DirectSoundCreate8 failed.\n", result)
            end switch
        end if

        result := lpDS->SetCooperativeLevel(hWnd, DSSCL_NORMAL)
        if(result != DS_OK)
            switch(result)
                DSERR_ALLOCATED:
                    throw DirectSoundAllocatedException("SetCooperativeLevel: the request failed because resources, such as a priority level, were already in use by another caller.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("SetCooperativeLevel: an invalid parameter was passed to the returning function.")

                DSERR_UNINITIALIZED:
                    throw DirectSoundUninitializedException("SetCooperativeLevel: the IDirectSound8::Initialize method has not been called or has not been called successfully before other methods were called.")

                DSERR_UNSUPPORTED:
                    throw DirectSoundUnsupportedException("SetCooperativeLevel: the function called is not supported.")

                default:
                    System::Runtime::InteropServices::COMException("IDirectSound8::SetCooperativeLevel failed.", result)
            end switch
        end if

    end function

    function Shutdown() : static

        if(lpDS != NULL)
            lpDS->Release()
            lpDS := NULL
        end if

    end function
end class