// Copyright(c) 2018 Seth Ballantyne <seth.ballantyne@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files(the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
#pragma once

using namespace System;

/// <summary>
/// thrown when scenes.xml is parsed and found to contain no scenes.
/// </summary>
public ref class NoScenesAvailableException : public Exception
{
public:
    NoScenesAvailableException() : Exception() {}
    NoScenesAvailableException(String ^message) : Exception(message) {}
};

/// <summary>
/// the exception that's thrown when the resource manager has received a request for a particular
/// resource that it doesn't have.
/// </summary>
public ref class ResourceNotFoundException : public Exception
{
public:
    ResourceNotFoundException() : Exception() {}
    ResourceNotFoundException(String ^message) : Exception(message) {}
};

/// <summary>
/// thrown when the game requests an entity that isn't present within the entities file.
/// </summary>
public ref class UnknownEntityException : public Exception
{
public:
	UnknownEntityException() : Exception() {}
	UnknownEntityException(String ^message) : Exception(message) {}
};

/// <summary>
/// Represents an error condition generated by a Win32 API function.
/// </summary>
/// 
//public ref class Win32Exception : public Exception
//{
//public:
//    Win32Exception() : Exception() {}
//    Win32Exception(String ^message) : Exception(message) {}
//
//    /// <summary>
//    /// Uses the Win32 API function GetLastError() to build an error string detailing why
//    /// <i>function</i> failed.
//    /// </summary>
//    /// <param name="function">the Win32 API function that failed.</param>
//    /// <returns>A managed string containing the formatted error message.</returns>
//    /// <exception cref="System::ArgumentNullException"><i>function</i> is <b>null</b>.</exception>
//    static String ^Format(String ^function);
//};