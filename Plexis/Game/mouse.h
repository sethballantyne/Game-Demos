// Copyright(c) 2018 Seth Ballantyne <seth.ballantyne@gmail.com>
//
// Permission is hereby granted, free of charge, to any person obtaining a copy of this
// software and associated documentation files(the "Software"), to deal in the Software
// without restriction, including without limitation the rights to use, copy, modify, merge,
// publish, distribute, sublicense, and / or sell copies of the Software, and to permit persons
// to whom the Software is furnished to do so, subject to the following conditions :
//
// The above copyright notice and this permission notice shall be included in all copies or
// substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
// INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A PARTICULAR
// PURPOSE AND NONINFRINGEMENT.IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE
// FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
#pragma once

#include <dinput.h>
#include "logmanager.h"
#include "logtype.h"

using namespace System;

#define MAX_NUM_BUTTONS 8 

/// <summary>
/// encapsulates a snapshot of the mouse state. There's functionality missing 
/// (like ButtonUp or ButtonClick functions) because the game doesn't need them.
/// </summary>
public ref class Mouse
{
private:
    int x;
	int y;
	int z;

	array<byte, 1> ^buttons = gcnew array<byte, 1>(MAX_NUM_BUTTONS);
	array<byte, 1> ^previousButtons = gcnew array<byte, 1>(MAX_NUM_BUTTONS);
public:
    /// <summary>
    /// Creates a new instance of Mouse.
    /// </summary>
    /// <param name="mouseState">the instance of LPDIMOUSESTATE2 generated by Input.</param>
    /// <exception cref="System::ArgumentNullException"><i>mouseState</i> is <b>null</b>.</exception>
    Mouse(LPDIMOUSESTATE2 currentMouseState, LPDIMOUSESTATE2 previousMouseState)
    {
        if(nullptr == currentMouseState)
        {
            throw gcnew ArgumentNullException("mouseState");
        }
        else
        {
			this->x = currentMouseState->lX;
			this->y = currentMouseState->lY;
			this->z = currentMouseState->lZ;

			for(int i = 0; i < MAX_NUM_BUTTONS; i++)
			{
				buttons[i] = currentMouseState->rgbButtons[i];
			}	

			for(int i = 0; i < MAX_NUM_BUTTONS; i++)
			{
				previousButtons[i] = previousMouseState->rgbButtons[i];
			}
        }
    }

    /// <summary>
    /// returns true if the specified button is currently pressed down.
    /// </summary>
    /// <param name="button">the buttons DirectInput scancode. (DIK_*)</param>
    /// <returns></returns>
    bool ButtonDown(BYTE button)
    {
        //return mouseState->rgbButtons[button] & 0x80;
		return buttons[button] & 0x80;
    }

	bool ButtonPressed(BYTE button)
	{
		if(previousButtons == nullptr || button > MAX_NUM_BUTTONS)
		{
			return false;
		}

		bool currentButtonState = this->buttons[button] & 0x80;
		bool previousButtonState = this->previousButtons[button] & 0x80;

		// key pressed if the currentState is false (key is up) and previous is true (key is down)
		return ((currentButtonState == false) && (previousButtonState == true));
	}

	property int PressedButton
	{
		int get()
		{
			for(int i = 0; i < MAX_NUM_BUTTONS; i++)
			{
				if(ButtonPressed(i))
				{
					return i;
				}
			}

			return -1;
		}
	}
    /// <summary>
    /// returns the X position of the mouse.
    /// </summary>
    property int X
    {
        int get()
		{
            return x;
        }
    }

    /// <summary>
    /// returns the Y position of the mouse.
    /// </summary>
    property int Y
    {
        int get()
        {
            return y;
        }
    }
};
