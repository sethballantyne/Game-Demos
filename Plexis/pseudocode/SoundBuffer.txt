-- Wrapper around a the IDirectSoundBuffer8 COM interface. SoundBuffer's are produced by Audio.

class SoundBuffer
Private
    LPDIRECTSOUNDBUFFER8 lpDSBuffer := NULL
Public
    constructor SoundBuffer(LPDIRECTSOUNDBUFFER8 lpDSSoundBuffer)

        if(lpDSSoundBuffer = NULL)
            throw ArgumentNullException("lpDSSoundBuffer")
        end if

        lpDSBuffer := lpDSSoundBuffer

    end constructor

    -- Plays the audio data stored in the buffer at the volume specified by SoundBuffer::Volume property.
    function Play()
        HRESULT result := lpDSBuffer->Play(0, 0, 0)
        if(result != DS_OK)
            switch(result)
                DSERR_BUFFERLOST:
                    throw DirectSoundBufferLostException("IDirectSoundBuffer8::Play: the buffer memory has been lost and must be restored.")
                
                DSERR_INVALIDCALL:
                    throw DirectSoundInvalidCallException("IDirectSoundBuffer8::Play: this function is not valid for the current state of this object.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::Play: an invalid parameter was passed to the returning function.")
                
                DSERR_PRIOLEVELNEEDED:
                    throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::Play: a cooperative level of DSSCL_PRIORITY or higher is required.")
                
                default
                    throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::Play failed.", result)
            end switch
        end if
    end function
    
    -- Releases the encapsulated DirectSoundBuffer8 object. Once this is called, SoundBuffer::Play, 
    -- SoundBuffer::Restore, SoundBuffer::Stop, SoundBuffer::IsPlaying, and SoundBuffer::Volume can no longer be called.
    function Release()
        if(lpDSBuffer != NULL)
            lpDSBuffer->Release()
            lpDSBuffer := NULL
        end if
    end function

    -- Attempts to restore the memory associated with the DirectSoundBuffer8 object. 
    -- This method should be called if DirectSoundBufferLostException is encountered. 
    -- If the exception is thrown when attempting to restore, the buffer has been lost and must be 
    -- reloaded via Audio::CreateSoundBuffer().
    --function Restore()

    --    DWORD status
    --    HRESULT result

    --    VerifyNotNull(lpDSBuffer)
    --    result := lpDSBuffer->GetStatus(&status)
    --    if(result != DS_OK)
    --        switch(result)
    --            DSERR_INVALIDPARAM:
    --                throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::GetStatus: an invalid parameter was passed to the returning function.")
    --
    --            default:
    --                throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::GetStatus failed.\n", result)
    --        end switch
    --    end if
    --
    --    if(status & DSBSTATUS_BUFFERLOST)
    --        
    --        result := lpDSBuffer->Restore()
    --        if(result != DS_OK)
    --                switch(result)
    --                    DSERR_BUFFERLOST:
    --                        throw DirectSoundBufferLostException("IDirectSoundBuffer8::Restore: ")
    --                    DSERR_INVALIDCALL:
    --                        throw DirectSoundInvalidCallException("IDirectSoundBuffer8::Restore: this function is not valid for the current state of this object.")
   
    --                    DSERR_PRIOLEVELNEEDED:
    --                        throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::Restore: a cooperative level of DSSCL_PRIORITY or higher is required.")
    --
    --                    default:
    --                        throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::Restore failed.", result)
    --                end switch
    --            end if
    --        end if

            -- TODO: BUFFER HAS BEEN RESTORED, NEEDS TO BE FILLED AGAIN WITH SOUND DATA.

    --   end if
    --end function

    -- Stops the audio buffer if it's playing. 
    function Stop()
        HRESULT result := lpDSBuffer->Stop()
        if(result != DS_OK)
            switch(result)
                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::Stop: an invalid parameter was passed to the returning function.")
            
                DSERR_PRIORITYLEVELNEEDED:
                    throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::Stop: a cooperative level of DSSCL_PRIORITY or higher is required.")
                
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::Stop failed.\n", result)
            end switch
        end if

        result := lpDSBuffer->SetCurrentPosition(0)
        if(result != DS_OK)
            switch(result)
                DSERR_INVALIDCALL:
                    throw DirectSoundInvalidCallException("IDirectSoundBuffer8::SetCurrentPosition: this function is not valid for the current state of this object.")

                DSERR_INVALIDPARAM:
                    throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::SetCurrentPosition: an invalid parameter was passed to the returning function.")

                DSERR_PRIOLEVELNEEDED:
                    throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::SetCurrentPosition: a cooperative level of DSSCL_PRIORITY or higher is required.")
                
                default:
                    throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::SetCurrentPosition failed.")
            end switch
        end if
    end function

    -- Returns a boolean value indicating whether the buffer is currently playing.
    property bool IsPlaying
        get
            DWORD status := 0

            HRESULT result := lpDSBuffer->GetStatus(&status)
            if(result != DS_OK)
                switch(result)
                    DSERR_INVALIDPARAM:
                        throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::GetStatus: an invalid parameter was passed to the returning function.")

                    default
                        -- the documentation mentions "If the method fails, the return value may be DSERR_INVALIDPARAM". *may be*. Really
                        -- helpful, Microsoft. Some DirectSound exceptions will probably be caught here. 
                        throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::GetStatus failed.", result)
                end switch
            end if

            return (status & DSBSTATUS_PLAYING)
        end get
    end property

    -- Gets and sets the buffer volume in the range of 0  - 100, 0 being silent and 100 being full volume.
    -- DirectSound treats 0 as being full volume, -10,000 is silent.
    property uint Volume
        get
            uint volume
            HRESULT result := lpDSBuffer->GetVolume(&volume)
            if(result != DS_OK)
                switch(result)
                    DSERR_CONTROLUNAVAIL:
                        throw DirectSoundControlUnavailableException("IDirectSoundBuffer8::GetVolume: the volume buffer control requested by the caller is unavailable.")

                    DSERR_INVALIDPARAM:
                        throw DirectSoundInvalidParameterException("IDirectSoundBuffer8:GetVolume: an invalid parameter was passed to the returning function.")

                    DSERR_PRIORITYLEVELNEEDED:
                        throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8:GetVolume: A cooperative level of DSSCL_PRIORITY or higher is required.")

                    default
                        throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::GetVolume failed", result)
                end switch
            else
                return (10000 - -volume) / 100
            end if
        end get

        set
            int volume := 10000 - (value * 100)
            HRESULT result := lpDSBuffer->SetVolume(volume)
            if(result != DS_OK)
                switch(result)
                    DSERR_CONTROLUNAVAIL:
                        throw DirectSoundControlUnvailableException("IDirectSoundBuffer8::SetVolume: the volume buffer control requested by the caller is unavailable.")

                    DSERR_GENERIC:
                        throw DirectSoundGenericException("IDirectSoundBuffer8::SetVolume: an undetermined error occurred inside the DirectSound subsystem. Call a psychic, fucked if I know.")

                    DSERR_INVALIDPARAM:
                        throw DirectSoundInvalidParameterException("IDirectSoundBuffer8::SetVolume: an invalid parameter was passed to the returning function.")

                    DSERR_PRIOLEVELNEEDED:
                        throw DirectSoundPriorityLevelNeededException("IDirectSoundBuffer8::SetVolume: a cooperative level of DSSCL_PRIORITY or higher is required.")
                    default:
                        throw System::Runtime::InteropServices::COMException("IDirectSoundBuffer8::SetVolume failed\n", result)
                end switch
            end if
        end set

    end property

    destructor 
        Release()
    end destructor
end class