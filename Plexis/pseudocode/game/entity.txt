class Entity : abstract
private
    Sprite sprite
    Vector2D velocity
    List<Entity> attachments
    float speed
    bool attached
    string name
    Rectangle boundingBox
    // UPDATE GETHASHCODE, EQUALS WHEN ADDING/REMOVING VARIABLES

    function UpdatePosition(int x, int y)
        e->sprite->Position->X := x
        e->sprite->Position->Y := y
		e->sprite->CurrentFrame->BoundingBox.X := x
		e->sprite->CurrentFrame->BoundingBox.Y := y
        //e->BoundingBox->X := x
        //e->BoundingBox->Y := y
    end function

public
    constructor(Sprite sprite, Vector2D velocity)
        if(sprite = nullptr)
            throw ArgumentNullException("sprite")
        else if(velocity = nullptr)
            throw ArgumentNullException("velocity")

        self->sprite = sprite
        self->velocity = velocity
        self->boundingBox.X := sprite->Position->X + sprite->CurrentFrame->BoundingBox->X
        self->boundingBox.Y := sprite->Position->Y + sprite->CurrentFrame->BoundingBox->Y
        self->boundingBox.Width := sprite->CurrentFrame->BoundingBox->Width
        self->boundingBox.Height := sprite->CurrentFrame->BoundingBox->Height
    end constructor

    function Attach(Entity entityToAttach, int x, int y)
        
        assert(nullptr != attachments, "attachments isn't initialised.")

        if(nullptr = entityToAttach)
            throw ArgumentNullException("entityToAttach")
        else if(attachments->Contains(entityToAttach))
            throw ArgumentException("attaching an entity that's already attached.")
        end if

        entityToAttach->Velocity := self->Velocity
        entityToAttach->UpdatePosition(x, y)
        -- entityToAttach->Sprite->Position->X = x;
        -- entityToAttach->Sprite->Position->Y = y;

        self->attachments->Add(entityToAttach)
        entityToAttach->Attached := true
    end function

    function UnAttach(Entity entityToUnAttach)
        assert(nullptr != attachments, "attachments is unitialised.")
        
        if(attachments->Remove(entityToUnAttach))
            entityToUnAttach->Attached := false
        end if
        
    end function

    function Frame[] GetFrames()
        return self->frames
    end function

    function Object Clone() override
        return MemberwiseClone()
    end function

    function Update() : abstract

    function int GetHashCode() override
        // bassed on the code provided in Josh Bloch's Effective Java
        int hash := 7

        hash *= 37 + sprite::GetHashCode()
        hash *= 37 + velocity::GetHashCode()
        hash *= 37 + attachments::GetHashCode()
        hash *= 37 + speed::GetHashCode()
        hash *= 37 + attached::GetHashCode()
        hash *= 37 + name::GetHashCode()
        hash *= 37 + boundingBox::GetHashCode()
        return hash
    end function

    function bool Equals(Object obj) override
        if(nullptr == obj)
            return false
        end if

        if(obj->GetType() != GetType())
            return false
        end if

        return Equals(safe_cast<Entity>(obj))
    end function
    
    function bool Equals(Entity ^entity) 
        if(entity->Sprite == sprite && 
           entity->Velocity == velocity &&
           entity->Attachments == attachments &&
           entity->Speed == speed &&
           entity->Attached == attached &&
           entity->Name == name &&
           entity->BoundingBox == boundingBox)
                return true
        end if

        return false
    end function

    function void Move()
        -- Vector2 newPosition := self->Velocity->Normalise() * self->speed;
        self->UpdatePosition(Position.X, newPosition.Y)
        
        if(nullptr != attachments)
            foreach(Entity e in attachments)
               e->UpdatePosition(Position.X, newPosition.Y)
            end foreach
        end if
    end function

    function void SetPosition(int x, int y)
        self->Sprite->Position->X := x
        self->Sprite->Position->Y := y

        self->BoundingBox->X := self->Sprite->Position->X + self->Sprite->CurrentFrame->BoundingBox->X
        self->BoundingBox->Y := self->Sprite->Position->Y + self->Sprite->CurrentFrame->BoundingBox->Y
    end function

    bool operator != (Entity entity)
        return !Equals(entity)
    end operator

    bool operator == (Entity entity)
        return Equals(entity)
    end operator

    property Rectangle% BoundingBox
        get
            return self->boundingBox
    end property

    property ::Sprite Sprite
        get
            return self->sprite
    end property

    property Vector2D Velocity
        get
            return velocity
        set
            if(value = nullptr)
                throw ArgumentNullException("value")
            else
                self->velocity = value
            end if
    end property

    property float Speed 
        get
            return speed
        set 
            speed := value
    end property

    property bool Attached
        get 
            return attached
        set
            attached := value
    end property

    property string Name
        get
            return name
    end property
end class
