public class EntityFactory : static
private
    --new List<Entity> parsedEntities;
    new Dictionary<String, Entity> parsedEntities;

    function Rectangle ParseBoundingBox(XElement element, Size imageSize)
        try
            int fromX := XmlHelper::GetAttributeValueAsInt32(element, "fromX")
            int fromY := XmlHelper::GetAttributeValueAsInt32(element, "fromY")
            string toX   := XmlHelper::GetAttributeValue(element, "toX")
            string toY   := XmlHelper::GetAttributeValue(element, "toY")
            int theRealToX := 0
            int theRealToY := 0

            if("width" = toX->ToLower())
                theRealToX := imageSize->Width
            else
                theRealToX := Convert::ToInt32(toX)
            end if

            if("height" = toY->ToLower())
                theRealToY := imageSize->Height
            else
                theRealToY := Convert::ToInt32(toY)
            end if
            
            return Rectangle(fromX, fromY, theRealToX, theRealToY)
        catch
            throw
        end try
    end function

    function Frame ParseFrame(XElement frame)
        Rectangle frame
        Rectangle boundingBox
            
        frame.X := XmlHelper::GetAttributeValueAsInt32(frame, "x")
        frame.Y := XmlHelper::GetAttributeValueAsInt32(frame, "y")
        frame.Height := XmlHelper::GetAttributeValueAsInt32(frame, "width")
        frame.Width := XmlHelpe::GetAttributeValueAsInt32(frame, "height")

        XElement boundingBoxElement := frame->Element((string)"boundingBox")
        if(boundingBox != nullptr)
            boundingBox.X := XmlHelper::GetAttributeValueAsInt32(boundingBoxElement, "x")
            boundingBox.Y := XmlHelper::GetAttributeValueAsInt32(boundingBoxElement, "y")
            boundingBox.Width := XmlHelper::GetAttributeValueAsInt32(boundingBoxElement, "width")
            boundingBox.Height := XmlHelper::GetAttributeValueAsInt32(boundingBoxElement, "height")
        end if

        return new Frame(frame, boundingBox)
    end function

    -------------------------------------------
    -- OUT OF DATE! 
    -------------------------------------------
    function ParsePaddle(XElement element)
        try
            string name := XmlHelper::GetAttributeValue(element, "name")
            string image := XmlHelper::GetAttributeValue(element, "image")

            if(self->GetEntity<Paddle>(name) != nullptr)
                LogManager::WriteLine(LogType::Debug, "A paddle with the name {0} already exists in the entities list; skipping.")
                return
            end if

            XElement boundingBoxQuery := element->Element((string)"boundingBox")
            Size surfaceSize := ResourceManager::GetSurface(name)->Size;

            Rectangle boundingBox := ParseBoundingBox(boundingBoxQuery, surfaceSize);

            -- 
            -- INCORRECTLY USING NAME. 
            -- BOUNDINGBOXES ARE NOW PART OF SPRITE
            Paddle paddle(boundingBox, ResourceManager::GetSurface(name))

            parsedEntities[name] := paddle
        catch
            throw
        end try
    end function

    function Brick ParseBrick(XElement element)
        string name := XmlHelper::GetAttributeValue(element, "name")
        string image := XmlHelper::GetAttributeValue(element, "image")
        uint hitCount := XmlHelper::GetAttributeValueAsUint32(element, "hitCount")
        uint chanceOfPowerUp := XmlHelper::GetAttributeValueAsUint32(element, "chanceOfPowerUp")
        uint points := XmlHelper::GetAttributeValueAsUint32(element, "points")

        System::Collections::Generic::IEnumerable<XElement> frameQuery := sceneXML->Elements((string)"frame")
        if(XmlHelper::Count(frameQuery) == 0)
            throw Exception("No frames specified for {0}", name)
        end if

        List<Frame> frames
        foreach(XElement frame in frameQuery)
            frames->Add(ParseFrame(frame))
        end foreach

        Sprite brickSprite(0, 0, frames->ToArray(), image)

        -- bricks are stationary
        Vector2D velocity()
        Brick brick(brickSprite, velocity, hitCount, chanceOfPowerUp, points)
        parsedEntities[name] := brick
    end function

public
    -- warnings are not generated if a type is being added that has the same name and the same type as
    -- an existing object; this is by design. 
    function Read(XElement entitiesFile)
        try
            System::Collections::Generic::IEnumerable<XElement> sceneQuery := sceneXML->Elements((string)"entity")
            
            if(XmlHelper::Count(sceneQuery) == 0)
                LogManager::WriteLine(LogType::Debug, "the entities file doesn't contain any entity tags!")
                return
            end if

            foreach(XElement e in sceneQuery)
                string entityType := XmlHelper::GetAttributeValue(e, "name")

                if(entityType = "paddle")
                    ParsePaddle(e)
                else if(entityType = "brick")
                    ParseBrick(e)
                end if
            end foreach
        catch
        end try
    end function

    -- returns the entity of the specified type and name.
    --generic function <class T> where T : ref class T GetEntity(String name)
        
     --   for(int i := 0; i < entities->Count; i++)
     --       if(entities[i]->Name = name && entities[i]->GetType() = T::typeid)
     --           return safe_cast<T>(entities[i]->Clone())
     --       end if
     --   end for

        return T()
    end function

    function Entity GetEntity(String name)
        return parsedEntities[name]->Clone()
    end funtion

    -- returns an array of specified type
    --generic function <class T> where T : ref class array<T, 1>^ GetEntities()

    --    List<T> ^items := new List<T>()

     --   for(int i := 0; i < entities->Count; i++)
     --       if(entities[i]->GetType() == T::typeid)
     --           items->Add(safe_cast<T>(entities[i]->Clone()))
     --       end if
     --  end if

     --   return items->ToArray()

    --end function

end class