class EditorLogic
Private
	-- holds brick information read from entities.xml
	Bricks[] bricks

	Grid editorGrid

	-- all bricks are painted to this offscreen surface and then copied.
	-- mimics double buffering.
	Bitmap bufferBitmap;
	Graphics bufferBitmapGraphicsHandle;

	-- keeps track of the state of the GUI and is used to determine whether
	-- the splitcontainer needs to be displayed, so the editing controls are visible.
	-- When either File->New or File->Open are selected, guiState is set to GUIState::Editing
	-- and the splitcontainer will be visible for the life time of the programs instance.
	GUIState guiState
Public
	constructor EditorLogic()
		editorGrid := new Grid()

		editorGrid->CellHeight := 20
		editorGrid->CellWidth := 41
		editorGrid->GridWidth := 1024
		editorGrid->GridHeight := 480
	end constructor

	function AddBricksToListView(ImageList brickImageList, ListView listView)
		-- configuration information for the bricks has been read.
		-- Now attempt to load the first frame of each brick so it
		-- can be displayed in the editor.
		new StringBuilder sb()

		for(int i = 0, i < bricks->Length, bricks++)
			foreach(string directory in directoryList)
				sb->AppendFormat("{0}{1}{2}", directory, bricks[0]->imageName, ".bmp")
				string path = sb->ToString()
				if(File.Exists(path))
					brickImageList->Images->Add(bricks[0]->name, new Bitmap(path))

					-- using the string specified in the bricks name attribute in entities.xml
					-- as they imageList key and it just so happens it's also the label
					-- for the image in the list view.
					new ListViewItem newItem(bricks[0]->name, bricks[0]->name)
					listView.Items.Add(newItem)
					break
				end if

				sb->Clear()
			end foreach
		end for
	end function
	
	function CleanUp()
		if(gameGrid != null)
			gameGrid->Dispose()
		end if
	end function

	function DrawLevel(PictureBox renderTarget)
		bufferBitmapGraphicsHandle->Clear(Color::Black)

		for
			for 
			end for
		end for

		editorGrid->Render(bufferBitmapGraphicsHandle)
		pictureBox->Refresh()
	end function

	function LoadXMLData(ref ImageList imageList)
		-----------------------------------------------------------------
		-- First step: attempt load paths.xml.
		-- this file contains the locations of the resources
		-- used by the game. We need to access some of the games
		-- XML files and bitmap resources (the bricks)
		-- in order for the editor to do its job. The game is designed
		-- so certain XML and bitmap resources don't have to be in a 
		-- hardcoded, fixed location.
		-----------------------------------------------------------------
		Paths paths := XML::LoadPaths("paths.xml")

		if(paths->XMLPaths->Length = 0)
			-- throw exception
		end if

		-- enumerate all the locations we'll be searching for bitmaps.
		-- it's possible to set an attribute in the XML that specifies
		-- that the provided path and all its subdirectories should be included
		-- when searching for resources, so we have to factor this in.
		new List<string> dictionaryList

		foreach(string directory in paths->BitmapPaths)
		-- it's possible to add multiple entries of the same directory, fix if there's time.
			directory.Add(directory);

			if(directory->includeSubDirectories)
				IEnumerable<string> enumeratedDirectories := Directory.EnumerateDirectories(directory)
				if(enumeratedDirectories != null)
					dictionarylist->AddRange(enumeratedDirectories)
				end if
			end if
		end foreach
		-----------------------------------------------------------------
		-- Next step: we've located where the XML files are stored.
		-- Now we need to open entities.xml, which contains all the configuration
		-- data for the games assets. We're only interested in the bricks.
		------------------------------------------------------------------
		this->bricks := ReadBrickData(absolutePath)

		this->editorGrid->Colour := Properties->Settings->Default->GridColour
		this->editorGrid->Visible := Properties->Settings->Default->GridIsVisible
	end function

	function SetGUIState(GuiState state)
		switch(state)
			GuiState::Default

				-- hide the brush panel and level renderer.
				splitContainer.Visible := false

			    -----------------------------------------
				-- FILE MENU
				-----------------------------------------
				saveLevelToolStripButton.Enabled := false
				saveToolStripMenuItem.Enabled := false
				saveAsToolStripMenuItem.Enabled := false

				previewLevelToolStripButton.Enabled := false
				previewToolStripMenuItem.Enabled := false

				------------------------------------------
				-- EDIT MENU
				------------------------------------------
				undoToolStripMenuItem.Enabled := false
				undoToolStripButton.Enabled := false
				redoToolStripMenuItem.Enabled := false
				redoToolStripButton.Enabled := false

				-------------------------------------------
				-- VIEW MENU
				-------------------------------------------
				toggleGridToolStripButton.Enabled := false
				toggleGridToolStripMenuItem.Enabled := false

				-------------------------------------------
				-- TOOLS MENU
				-------------------------------------------
				eraserToolStripMenuItem.Enabled := false
				eraserToolStripButton.Enabled := false

				brushToolStripMenuItem.Enabled := false
				brushToolStripButton.Enabled := false

			GuiState::Editing
				splitContainer.Visible := true

				-----------------------------------------
				-- FILE MENU
				-----------------------------------------
				saveLevelToolStripButton.Enabled := true
				saveToolStripMenuItem.Enabled := true
				saveAsToolStripMenuItem.Enabled := true

				previewLevelToolStripButton.Enabled := true
				previewToolStripMenuItem.Enabled := true

				-------------------------------------------
				-- VIEW MENU
				-------------------------------------------
				toggleGridToolStripButton.Enabled := true
				toggleGridToolStripMenuItem.Enabled := true

				-------------------------------------------
				-- TOOLS MENU
				-------------------------------------------
				eraserToolStripMenuItem.Enabled := true
				eraserToolStripButton.Enabled := true

				brushToolStripMenuItem.Enabled := true
				brushToolStripButton.Enabled := true
		end switch

	end function
end class