class Level
Private
	-- every time a new level is opened or created, 
	-- this is populated with every brick as a key.
	Dictionary<string, List<Point>> levelData

	int[,] levelData
Public
	-- initialises a new instance of level, creating a blank level of dimensions width by height.
	constructor(int width, int height)
		this->levelData := new int[width, height]
		this->width := width
		this->height := height

		this->Clear()
	end constructor

	-- clears all the bricks in the level.
	function Clear()
		for(int i := 0, i < width, i++)
			for (int j := 0, j < height, j++)
				level[i, j] := -1
            end for
        end for
	end function

	-- gets the brick at the specified coordinate. A return value of -1 indicates
	-- there's no brick at the coordinate.  index is the position of the brick in the EditorLogic::bricks[] array.
	function GetBrick(int x, int y, int index)
		return level[x, y]
	end function

	-- places the specified brick at the specified coordinates.
	-- passing -1 in index will remove a brick at the specified coordinates.
	-- index is the position of the brick in the EditorLogic::bricks[] array.
	-- note that updating this array does not make the changes immediately avaible; the level
	-- has to be manually redrawn after changes are made.
	function SetBrick(int x, int y, int index)
		levelData[x,y] := index
	end function

	-- formats the current level so XML::WriteLevel can export it to XML.
	-- the level has to be formatted so all the brick coordinates are grouped by brick
	-- in order to be written out in the correct format. You could export it as is, but 
	-- the resulting XML would be suboptimal. (it's XML, it's not optimal anyway..)
	function Dictionary<string, Point[]> BuildDictionary(Brick[] bricks)
		Dictionary<string, List<Point>> output

		for(int i = 0, i < bricks->Length, i++)
			output[bricks[i]->Name] := new List<Point>()
		end for

		for(int j = 0, i < width, j++)
			for(int k = 0, i < height, k++)
				int index = levelData[j,k]
				output[bricks[index]->Name]->Value->Add(new Point(j, k))
			end for
		end for
		
		return output
	end function
end class