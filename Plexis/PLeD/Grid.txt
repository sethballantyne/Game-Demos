class Grid implements IDisposable
Private
	int cellWidth
	int cellHeight
	int gridWidth
	int gridHeight
	Color gridColour
	bool visible

	-- needs to be disposed!
	Pen gridPen

	bool disposed := false
Protected
	function Dispose(bool disposing) virtual
		if(disposed)
			return
		end if

		-- if disposing is false, assume it's being called by the finalizer.
		if(disposing)
			gridPen->Dispose()
		end if

		disposed := true
	end function
Public

	property int CellHeight
		get
			return this->cellHeight
		set
			this->cellHeight := value
	end property

	property int CellWidth
		get
			return this->cellWidth
		set
			this->cellWidth := value
	end property

	property Color Colour
		get
			return this->gridColour
		set
			this->gridPen->Colour := this->gridColour := value

	end property

	function void Dispose() override
		Dispose(true)

		GC->SuppressFinalize(this)
	end function
		
	property int Height
		get
			return this->gridHeight
		set
			this->gridHeight := value
	end property

	property void Render(Graphics renderTarget)
		if(!visible)
			return
		end if

		-- horizontal lines
		for(int i := 0, i < this->gridHeight, i += this->cellHeight)
			renderTarget->DrawLine(this->gridPen, 0, i, this->gridWidth, i)
		end for

		-- vertical lines
		for(int i := 0, i < this->gridWidth, i += this->cellWidth)
			renderTarget->DrawLine(this->gridPen, i, 0, i, this->gridHeight - this->cellHeight)
		end for
	end property

	property bool Visible
		get
			return this->visible
		set
			this->visible := value
	end property

	property int Width
		get
			return this->gridWidth
		set
			this->gridWidth := value
	end property

	destructor 
		this->Dispose(false)
	end destructor
end class