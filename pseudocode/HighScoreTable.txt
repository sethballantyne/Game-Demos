-- Control that displays all the highscores. It can be put into an edit mode so the 
-- player can enter a username. See HighScoreTable::ReceiveSceneArgs() for details.
class HighScoreTable inherits ContainerControl
Private
    -- each row that makes up the table. A list is being used instead of an array so if the number
    -- of rows that makes up the table happens to change, I don't have to mess around changing the number of 
    -- elements. 
    new List<HighScoreRow> rows

    -- determines whether the control has been put into a state where the player can 
    -- enter a name for a new highscore.
    bool editModeEnabled := false

    -- the row that contains the new highscore. This is only used when the player
    -- has to enter a name to go with a new highscore. 
    int rowBeingEdited

    -- only used in edit mode. It represents the new high score, go figure. 
    int newHighScore
Public
    -- Exceptions: 
    -- System::ArgumentNullException: either rowNumberFont, playerNameFont, scoreFont or parentContainer is NULL.
    -- System::ArgumentException: either rowNumberFont, playerNameFont, or scoreFont evaluates to String::Empty.
    -- ResourceNotFoundException: the specified font doesn't exist within the resource manager.
    constructor(int x, int y, int selectedIndex, int numberOfRows, int verticalSpacing, int indexXPosition,
    string rowNumberFont, int playerNameXPosition, string playerNameFont, int scoreXPosition, string scoreFont,
    MenuItemContainer parentContainer) : ContainerControl(x, y, selectedIndex, parentContainer)

        if(rowNumberFont = NULL)
            throw ArgumentNullException("rowNumberFont")
        else if(playerNameFont = NULL)
            throw ArgumentNullException("playerNameFont")
        else if(scoreFont = NULL)
            throw ArgumentNullException("scoreFont")
        else if(parentContainer = NULL)
            throw ArgumentNullException("parentContainer")
        end if

        if(rowNumberFont = String::Empty)
            throw ArgumentException("rowNumberFont")
        else if(playerNameFont = String::Empty)
            throw ArgumentException("playerNameFont")
        else if(scoreFont = String::Empty)
            throw ArgumentException("scoreFont")
        end if

        for(i := 0 to numberOfRows)
            int rowYPosition := y + (i * verticalSpacing)

            new Point indexPosition(indexXPosition, rowYPosition)
            new Point playerNamePosition(indexXPosition, rowYPosition)
            new Point scorePosition(indexXPosition, rowYPosition)

            try
                new HighScoreRow newHighScoreRow(rowNumberFont, indexPosition, playerNameFont, 
                                                 playerNamePosition, scoreFont, scorePosition)
            catch
                throw
            end try

            newHighScoreRow->Index->Text := Convert::ToString(i)
            newHighScoreRow->PlayerName->Text := HighScores::GetPlayerName(i)
            newHighScoreRow->Score->Text := Convert::ToString(HighScores::GetHighScore(i))

            rows->Add(newHighScoreRow)         
        end for
    end constructor 

    -- Passing a row index as the first argument and another integer as the second argument
    -- puts the table into edit mode. The second arg will be assumed to be the score.
    -- If incorrect params are passed or no params at all, the table will be in "view" mode.
    function ReceiveSceneArgs(object[] args)
        if(args != NULL)
            if(args->Count > 1 && ((args[0] is type(int)) && (args[1] is type(int))))
                if(args[0] <= rows->Count - 1)
                    self->rowBeingEdited := args[0]
                    self->newHighScore := args[1]

                    rows[self->rowBeingEdited]->PlayerName->EditModeEnabled := true
                    self->editModeEnabled := true
                end if
            end if
        end if
    end function

    -- Used to process user input when the control is in edit mode. 
    -- Exceptions:
    -- System::ArgumentNullException: keyboardState is NULL.
    -- System::ArgumentOutOfRangeException: the row number is greater than the number of rows
    --                                      contained within HighScores. (ie, attempting to submit a score for a 11th position when only 10 are supported).
    -- System::IO::IOException: an unspecified IO error occured while writing to disk.
    function Update(Keys keyboardState, Mouse mouseState)
        if(keyboardState = NULL)
            throw ArgumentNullException("keyboardState")
        end if

        if(editModeEnabled)
            rows[self->rowBeingEdited]->PlayerName->Update(keyboardState, mouseState)
            
            -- possible bug here; will report true if enter is pressed along with other keys
            -- which may not be the intended desire. Make sure to test.
            if(keyboardState->KeyPressed(DIK_ENTER))
                enabled := false

                -- don't need to set the eitable labels EditModeEnabled property to false
                -- because it'll be handled in the objects Update() method.

                string newPlayerName := rows[self->rowBeingEdited]->PlayerName->Text
                HighScores::Update(self->rowBeingEdited, newPlayerName, newHighScore)

                parentContainer->SelectNextControl()
            end if

        end if
    end if

    -- Renders the table to the backbuffer.
    function Render()
        for(i := 0 to rows->Count - 1)
            rows[i]->Render()
        end for
    end function

    -- Assigns the HighscoreTable to the specified container. When assigning a container,
    -- HighScoreTable adds itself to the containers control list.
    -- Exceptions:
    -- ArgumentNullException: attempting to assign a NULL value.
    --property MenuItemContainer ParentContainer

     --   accessors
     --       get
     ---           return parentContainer
     --       set
     --           if(value = NULL)
     --               throw ArgumentNullException("Nope")
     --
      --          parentContainer := value
     --           parentContainer->Controls->Add(self)
     --   end accessors

    --end property
end class